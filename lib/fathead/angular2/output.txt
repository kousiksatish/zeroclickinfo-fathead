MockLocationStrategy	A										<section class='prog__container'><p>A mock implementation of LocationStrategy that allows tests to fire simulated\nlocation events.</p></section>	https://angular.io/docs/ts/latest/api/common/testing/index/MockLocationStrategy-class.html
SpyLocation	A										<section class='prog__container'><p>A spy for Location that allows tests to fire simulated location events.</p></section>	https://angular.io/docs/ts/latest/api/common/testing/index/SpyLocation-class.html
ClientMessageBroker	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/ClientMessageBroker-class.html
ClientMessageBrokerFactory	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/ClientMessageBrokerFactory-class.html
FnArg	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/FnArg-class.html
MessageBus	A										<section class='prog__container'><p>Message Bus is a low level API used to communicate between the UI and the background.\nCommunication is based on a channel abstraction. Messages published in a\ngiven channel to one MessageBusSink are received on the same channel\nby the corresponding MessageBusSource.</p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/MessageBus-class.html
MessageBusSink	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/MessageBusSink-interface.html
MessageBusSource	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/MessageBusSource-interface.html
PRIMITIVE	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/PRIMITIVE-let.html
ReceivedMessage	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/ReceivedMessage-class.html
ServiceMessageBroker	A										<section class='prog__container'><p>Helper class for UIComponents that allows components to register methods.\nIf a registered method message is received from the broker on the worker,\nthe UIMessageBroker deserializes its arguments and calls the registered method.\nIf that method returns a promise, the UIMessageBroker returns the result to the worker.</p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/ServiceMessageBroker-class.html
ServiceMessageBrokerFactory	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/ServiceMessageBrokerFactory-class.html
UiArguments	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/UiArguments-class.html
WORKER_APP_LOCATION_PROVIDERS	A										<section class='prog__container'><p>Those providers should be added when the router is used in a worker context in addition to the\nROUTER_PROVIDERS and after them.</p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/WORKER_APP_LOCATION_PROVIDERS-let.html
WORKER_UI_LOCATION_PROVIDERS	A										<section class='prog__container'><p>A list of Providers. To use the router in a Worker enabled application you must\ninclude these providers when setting up the render thread.</p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/WORKER_UI_LOCATION_PROVIDERS-let.html
WorkerAppModule	A										<section class='prog__container'><p>The ng module for the worker app side.</p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/WorkerAppModule-class.html
bootstrapWorkerUi	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export bootstrapWorkerUi(workerScriptUri: string, customProviders?: Provider[]) : Promise&lt;PlatformRef&gt;</code></pre><p>Bootstraps the worker ui.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/bootstrapWorkerUi-function.html
platformWorkerApp	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/platformWorkerApp-let.html
platformWorkerUi	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker/index/platformWorkerUi-let.html
platformWorkerAppDynamic	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-webworker-dynamic/index/platformWorkerAppDynamic-let.html
ComponentFixture	A										<section class='prog__container'><p>Fixture for debugging and testing a component.</p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/ComponentFixture-class.html
ComponentFixtureAutoDetect	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/ComponentFixtureAutoDetect-let.html
ComponentFixtureNoNgZone	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/ComponentFixtureNoNgZone-let.html
InjectSetupWrapper	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/InjectSetupWrapper-class.html
TestBed	A										<section class='prog__container'><p>TestBed is the primary api for writing unit tests for Angular applications and libraries.</p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/TestBed-class.html
TestComponentRenderer	A										<section class='prog__container'><p>An abstract class for inserting the root test component element in a platform independent way.</p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/TestComponentRenderer-class.html
async	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export async(fn: Function) : (done: any) =&gt; any</code></pre><p>Wraps a test function in an asynchronous test zone. The test will automatically\ncomplete when all asynchronous calls within this zone are done. Can be used\nto wrap an <a href="inject-function.html"><code>inject</code></a> call.</p>\n<p>Example:</p>\n<code-example format="linenums" language="js">it('...', async(inject([AClass], (object) =&gt; {\n  object.doSomething.then(() =&gt; {\n    expect(...);\n  })\n});\n</code-example></div></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/async-function.html
discardPeriodicTasks	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export discardPeriodicTasks() : void</code></pre><p>Discard all remaining periodic tasks.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/discardPeriodicTasks-function.html
fakeAsync	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export fakeAsync(fn: Function) : args: any[]) =&gt; any</code></pre><p>Wraps a function to be executed in the fakeAsync zone:</p>\n<ul>\n<li>microtasks are manually executed by calling <code>flushMicrotasks()</code>,</li>\n<li>timers are synchronous, <code>tick()</code> simulates the asynchronous passage of time.</li>\n</ul>\n<p>If there are any pending timers at the end of the function, an exception will be thrown.</p>\n<p>Can be used to wrap inject() calls.</p>\n<h2 id="example">Example</h2>\n<div class="code-example"><code-example format="linenums" language="ts">describe('this test', () =&gt; {\n  it('looks async but is synchronous', &lt;any&gt;fakeAsync((): void =&gt; {\n       var flag = false;\n       setTimeout(() =&gt; { flag = true; }, 100);\n       expect(flag).toBe(false);\n       tick(50);\n       expect(flag).toBe(false);\n       tick(50);\n       expect(flag).toBe(true);\n     }));\n});\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/fakeAsync-function.html
flushMicrotasks	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export flushMicrotasks() : void</code></pre><p>Flush any pending microtasks.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/flushMicrotasks-function.html
getTestBed	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export getTestBed()</code></pre></div></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/getTestBed-function.html
inject	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export inject(tokens: any[], fn: Function) : () =&gt; any</code></pre><p>Allows injecting dependencies in <code>beforeEach()</code> and <code>it()</code>.</p>\n<p>Example:</p>\n<code-example format="linenums" language="js">beforeEach(inject([Dependency, AClass], (dep, object) =&gt; {\n  // some code that uses `dep` and `object`\n  // ...\n}));\n\nit('...', inject([AClass], (object) =&gt; {\n  object.doSomething();\n  expect(...);\n})\n</code-example><p>Notes:</p>\n<ul>\n<li>inject is currently a function because of some Traceur limitation the syntax should\neventually\nbecomes <code>it('...', @Inject (object: AClass, async: AsyncTestCompleter) =&gt; { ... });</code></li>\n</ul>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/inject-function.html
resetFakeAsyncZone	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export resetFakeAsyncZone()</code></pre><p>Clears out the shared fake async zone for a test.\nTo be called in a global <code>beforeEach</code>.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/resetFakeAsyncZone-function.html
tick	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export tick(millis?: number) : void</code></pre><p>Simulates the asynchronous passage of time for the timers in the fakeAsync zone.</p>\n<p>The microtasks queue is drained at the very start of this function and after any timer callback\nhas been executed.</p>\n<h2 id="example">Example</h2>\n<div class="code-example"><code-example format="linenums" language="ts">describe('this test', () =&gt; {\n  it('looks async but is synchronous', &lt;any&gt;fakeAsync((): void =&gt; {\n       var flag = false;\n       setTimeout(() =&gt; { flag = true; }, 100);\n       expect(flag).toBe(false);\n       tick(50);\n       expect(flag).toBe(false);\n       tick(50);\n       expect(flag).toBe(true);\n     }));\n});\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/tick-function.html
withModule	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export withModule(moduleDef: TestModuleMetadata) : InjectSetupWrapper</code></pre></div></p></section>	https://angular.io/docs/ts/latest/api/core/testing/index/withModule-function.html
BrowserTestingModule	A										<section class='prog__container'><p>NgModule for testing.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/testing/index/BrowserTestingModule-class.html
platformBrowserTesting	A										<section class='prog__container'><p>Platform for testing</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/testing/index/platformBrowserTesting-let.html
AbstractControl	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/forms/index/AbstractControl-class.html
AbstractControlDirective	A										<section class='prog__container'><p>Base class for control directives.\nOnly used internally in the forms module.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/AbstractControlDirective-class.html
AbstractFormGroupDirective	A										<section class='prog__container'><p>This is a base class for code shared between NgModelGroup and FormGroupName.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/AbstractFormGroupDirective-class.html
AsyncValidatorFn	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/forms/index/AsyncValidatorFn-interface.html
CheckboxControlValueAccessor	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/CheckboxControlValueAccessor-directive.html
ControlContainer	A										<section class='prog__container'><p>A directive that contains multiple NgControls.\nOnly used by the forms module.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/ControlContainer-class.html
ControlValueAccessor	A										<section class='prog__container'><p>A bridge between a control and a native element.\nA ControlValueAccessor abstracts the operations of writing a new value to a\nDOM element representing an input control.\nPlease see DefaultValueAccessor for more information.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/ControlValueAccessor-interface.html
DefaultValueAccessor	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/DefaultValueAccessor-directive.html
Form	A										<section class='prog__container'><p>An interface that FormGroupDirective and NgForm implement.\nOnly used by the forms module.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/Form-interface.html
FormArray	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/forms/index/FormArray-class.html
FormArrayName	A										<section class='prog__container'><p>Syncs a nested FormArray to a DOM element.\n</p><pre><code>This directive is designed to be used with a parent FormGroupDirective (selector:\n[formGroup]).\nIt accepts the string name of the nested FormArray you want to link, and\nwill look for a FormArray registered with that name in the parent\nFormGroup instance you passed into FormGroupDirective.\nNested form arrays can come in handy when you have a group of form controls but\nyou're not sure how many there will be. Form arrays allow you to create new\nform controls dynamically.\nAccess the array: You can access the associated FormArray using the\nget method on the parent FormGroup.\nEx: this.form.get('cities').\nGet the value: the value property is always synced and available on the\nFormArray. See a full list of available properties in AbstractControl.\nSet the value: You can set an initial value for each child control when instantiating\nthe FormArray, or you can set the value programmatically later using the\nFormArray's setValue or patchValue\nmethods.\nListen to value: If you want to listen to changes in the value of the array, you can\nsubscribe to the FormArray's valueChanges event.  You can also\nlisten to its statusChanges event to be notified when the validation\nstatus is re-calculated.\nAdd new controls: You can add new controls to the FormArray dynamically by\ncalling its push method.\n Ex: this.form.get('cities').push(new FormControl());\nExample\nimport {Component} from '@angular/core';\nimport {FormArray, FormControl, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form [formGroup]="form" (ngSubmit)="onSubmit()">\n      <div formArrayName="cities">\n        <div *ngFor="let city of cities.controls; let i=index">\n          <input [formControlName]="i" placeholder="City">\n        </div>\n      </div>\n      <button>Submit</button>\n    </form>\n\n    <button (click)="addCity()">Add City</button>\n    <button (click)="setPreset()">Set preset</button>\n  `,\n})\nexport class NestedFormArray {\n  form = new FormGroup({\n    cities: new FormArray([\n      new FormControl('SF'),\n      new FormControl('NY'),\n    ]),\n  });\n\n  get cities(): FormArray { return this.form.get('cities') as FormArray; }\n\n  addCity() { this.cities.push(new FormControl()); }\n\n  onSubmit() {\n    console.log(this.cities.value);  // ['SF', 'NY']\n    console.log(this.form.value);    // { cities: ['SF', 'NY'] }\n  }\n\n  setPreset() { this.cities.patchValue(['LA', 'MTV']); }\n}\n\nnpm package: @angular/forms\n\nNgModule: ReactiveFormsModule\n\n\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/FormArrayName-directive.html
FormBuilder	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/forms/index/FormBuilder-class.html
FormControl	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/forms/index/FormControl-class.html
FormControlDirective	A										<section class='prog__container'><p>Syncs a standalone FormControl instance to a form control element.\nIn other words, this directive ensures that any values written to the FormControl\ninstance programmatically will be written to the DOM element (model -> view). Conversely,\nany values written to the DOM element through user input will be reflected in the\nFormControl instance (view -> model).\n</p><pre><code>Use this directive if you'd like to create and manage a FormControl instance directly.\nSimply create a FormControl, save it to your component class, and pass it into the\nFormControlDirective.\nThis directive is designed to be used as a standalone control.  Unlike FormControlName,\nit does not require that your FormControl instance be part of any parent\nFormGroup, and it won't be registered to any FormGroupDirective that\nexists above it.\nGet the value: the value property is always synced and available on the\nFormControl instance. See a full list of available properties in\nAbstractControl.\nSet the value: You can pass in an initial value when instantiating the FormControl,\nor you can set it programmatically later using setValue or\npatchValue.\nListen to value: If you want to listen to changes in the value of the control, you can\nsubscribe to the valueChanges event.  You can also listen to\nstatusChanges to be notified when the validation status is\nre-calculated.\nExample\nimport {Component} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n     <input [formControl]="control">\n\n     <p>Value: {{ control.value }}</p>\n     <p>Validation status: {{ control.status }}</p>\n\n     <button (click)="setValue()">Set value</button>\n  `,\n})\nexport class SimpleFormControl {\n  control: FormControl = new FormControl('value', Validators.minLength(2));\n\n  setValue() { this.control.setValue('new value'); }\n}\n\nnpm package: @angular/forms\n\nNgModule: ReactiveFormsModule\n\n\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/FormControlDirective-directive.html
FormControlName	A										<section class='prog__container'><p>Syncs a FormControl in an existing FormGroup to a form control\nelement by name.\nIn other words, this directive ensures that any values written to the FormControl\ninstance programmatically will be written to the DOM element (model -> view). Conversely,\nany values written to the DOM element through user input will be reflected in the\nFormControl instance (view -> model).\n</p><pre><code>This directive is designed to be used with a parent FormGroupDirective (selector:\n[formGroup]).\nIt accepts the string name of the FormControl instance you want to\nlink, and will look for a FormControl registered with that name in the\nclosest FormGroup or FormArray above it.\nAccess the control: You can access the FormControl associated with\nthis directive by using the get method.\nEx: this.form.get('first');\nGet value: the value property is always synced and available on the FormControl.\nSee a full list of available properties in AbstractControl.\n Set value: You can set an initial value for the control when instantiating the\n FormControl, or you can set it programmatically later using\n setValue or patchValue.\nListen to value: If you want to listen to changes in the value of the control, you can\nsubscribe to the valueChanges event.  You can also listen to\nstatusChanges to be notified when the validation status is\nre-calculated.\nExample\nIn this example, we create form controls for first name and last name.\nimport {Component} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form [formGroup]="form" (ngSubmit)="onSubmit()">\n      <div *ngIf="first.invalid"> Name is too short. </div>\n\n      <input formControlName="first" placeholder="First name">\n      <input formControlName="last" placeholder="Last name">\n\n      <button type="submit">Submit</button>\n   </form>\n   <button (click)="setValue()">Set preset value</button>\n  `,\n})\nexport class SimpleFormGroup {\n  form = new FormGroup({\n    first: new FormControl('Nancy', Validators.minLength(2)),\n    last: new FormControl('Drew'),\n  });\n\n  get first(): any { return this.form.get('first'); }\n\n  onSubmit(): void {\n    console.log(this.form.value);  // {first: 'Nancy', last: 'Drew'}\n  }\n\n  setValue() { this.form.setValue({first: 'Carson', last: 'Drew'}); }\n}\nTo see formControlName examples with different form control types, see:\n\nRadio buttons: RadioControlValueAccessor\nSelects: SelectControlValueAccessor\n\nnpm package: @angular/forms\nNgModule: ReactiveFormsModule\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/FormControlName-directive.html
FormGroup	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/forms/index/FormGroup-class.html
FormGroupDirective	A										<section class='prog__container'><p>Binds an existing FormGroup to a DOM element.\n</p><pre><code>This directive accepts an existing FormGroup instance. It will then use this\nFormGroup instance to match any child FormControl, FormGroup,\nand FormArray instances to child FormControlName, FormGroupName,\nand FormArrayName directives.\nSet value: You can set the form's initial value when instantiating the\nFormGroup, or you can set it programmatically later using the FormGroup's\nsetValue or patchValue methods.\nListen to value: If you want to listen to changes in the value of the form, you can subscribe\nto the FormGroup's valueChanges event.  You can also listen to\nits statusChanges event to be notified when the validation status is\nre-calculated.\nFurthermore, you can listen to the directive's ngSubmit event to be notified when the user has\ntriggered a form submission. The ngSubmit event will be emitted with the original form\nsubmission event.\nExample\nIn this example, we create form controls for first name and last name.\nimport {Component} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form [formGroup]="form" (ngSubmit)="onSubmit()">\n      <div *ngIf="first.invalid"> Name is too short. </div>\n\n      <input formControlName="first" placeholder="First name">\n      <input formControlName="last" placeholder="Last name">\n\n      <button type="submit">Submit</button>\n   </form>\n   <button (click)="setValue()">Set preset value</button>\n  `,\n})\nexport class SimpleFormGroup {\n  form = new FormGroup({\n    first: new FormControl('Nancy', Validators.minLength(2)),\n    last: new FormControl('Drew'),\n  });\n\n  get first(): any { return this.form.get('first'); }\n\n  onSubmit(): void {\n    console.log(this.form.value);  // {first: 'Nancy', last: 'Drew'}\n  }\n\n  setValue() { this.form.setValue({first: 'Carson', last: 'Drew'}); }\n}\nnpm package: @angular/forms\nNgModule: ReactiveFormsModule\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/FormGroupDirective-directive.html
FormGroupName	A										<section class='prog__container'><p>Syncs a nested FormGroup to a DOM element.\n</p><pre><code>This directive can only be used with a parent FormGroupDirective (selector:\n[formGroup]).\nIt accepts the string name of the nested FormGroup you want to link, and\nwill look for a FormGroup registered with that name in the parent\nFormGroup instance you passed into FormGroupDirective.\nNested form groups can come in handy when you want to validate a sub-group of a\nform separately from the rest or when you'd like to group the values of certain\ncontrols into their own nested object.\nAccess the group: You can access the associated FormGroup using the\nget method. Ex: this.form.get('name').\nYou can also access individual controls within the group using dot syntax.\nEx: this.form.get('name.first')\nGet the value: the value property is always synced and available on the\nFormGroup. See a full list of available properties in AbstractControl.\nSet the value: You can set an initial value for each child control when instantiating\nthe FormGroup, or you can set it programmatically later using\nsetValue or patchValue.\nListen to value: If you want to listen to changes in the value of the group, you can\nsubscribe to the valueChanges event.  You can also listen to\nstatusChanges to be notified when the validation status is\nre-calculated.\nExample\nimport {Component} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form [formGroup]="form" (ngSubmit)="onSubmit()">\n      <p *ngIf="name.invalid">Name is invalid.</p>\n\n      <div formGroupName="name">\n        <input formControlName="first" placeholder="First name">\n        <input formControlName="last" placeholder="Last name">\n      </div>\n      <input formControlName="email" placeholder="Email">\n      <button type="submit">Submit</button>\n    </form>\n\n    <button (click)="setPreset()">Set preset</button>\n`,\n})\nexport class NestedFormGroupComp {\n  form = new FormGroup({\n    name: new FormGroup({\n      first: new FormControl('Nancy', Validators.minLength(2)),\n      last: new FormControl('Drew', Validators.required)\n    }),\n    email: new FormControl()\n  });\n\n  get first(): any { return this.form.get('name.first'); }\n\n  get name(): any { return this.form.get('name'); }\n\n  onSubmit() {\n    console.log(this.first.value);  // 'Nancy'\n    console.log(this.name.value);   // {first: 'Nancy', last: 'Drew'}\n    console.log(this.form.value);   // {name: {first: 'Nancy', last: 'Drew'}, email: ''}\n    console.log(this.form.status);  // VALID\n  }\n\n  setPreset() { this.name.setValue({first: 'Bess', last: 'Marvin'}); }\n}\n\nnpm package: @angular/forms\n\nNgModule: ReactiveFormsModule\n\n\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/FormGroupName-directive.html
FormsModule	A										<section class='prog__container'><p>The ng module for forms.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/FormsModule-class.html
MaxLengthValidator	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/MaxLengthValidator-directive.html
MinLengthValidator	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/MinLengthValidator-directive.html
NG_ASYNC_VALIDATORS	A										<section class='prog__container'><p>Providers for asynchronous validators to be used for FormControls\nin a form.\nProvide this using multi: true to add validators.\nSee NG_VALIDATORS for more details.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/NG_ASYNC_VALIDATORS-let.html
NG_VALIDATORS	A										<section class='prog__container'><p>Providers for validators to be used for FormControls in a form.\nProvide this using multi: true to add validators.</p><pre><code>BAD FILENAME: ../../../../../_fragments/_api/core/forms/ts/ng_validators/ng_validators-ng_validators.ts.md   Current path: docs,ts,latest,api,forms,index,NG_VALIDATORS-let PathToDocs: ../../../../../</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/NG_VALIDATORS-let.html
NG_VALUE_ACCESSOR	A										<section class='prog__container'><p>Used to provide a ControlValueAccessor for form controls.\nSee DefaultValueAccessor for how to implement one.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/NG_VALUE_ACCESSOR-let.html
NgControl	A										<section class='prog__container'><p>A base class that all control directive extend.\nIt binds a FormControl object to a DOM element.\nUsed internally by Angular forms.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/NgControl-class.html
NgControlStatus	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/NgControlStatus-directive.html
NgControlStatusGroup	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/NgControlStatusGroup-directive.html
NgForm	A										<section class='prog__container'><p>Creates a top-level FormGroup instance and binds it to a form\nto track aggregate form value and validation status.\n</p><pre><code>As soon as you import the FormsModule, this directive becomes active by default on\nall <form> tags.  You don't need to add a special selector.\nYou can export the directive into a local template variable using ngForm as the key\n(ex: #myForm="ngForm"). This is optional, but useful.  Many properties from the underlying\nFormGroup instance are duplicated on the directive itself, so a reference to it\nwill give you access to the aggregate value and validity status of the form, as well as\nuser interaction properties like dirty and touched.\nTo register child controls with the form, you'll want to use NgModel with a\nname attribute.  You can also use NgModelGroup if you'd like to create\nsub-groups within the form.\nYou can listen to the directive's ngSubmit event to be notified when the user has\ntriggered a form submission. The ngSubmit event will be emitted with the original form\nsubmission event.\nimport {Component} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form #f="ngForm" (ngSubmit)="onSubmit(f)" novalidate>\n      <input name="first" ngModel required #first="ngModel">\n      <input name="last" ngModel>\n      <button>Submit</button>\n    </form>\n\n    <p>First name value: {{ first.value }}</p>\n    <p>First name valid: {{ first.valid }}</p>\n    <p>Form value: {{ f.value | json }}</p>\n    <p>Form valid: {{ f.valid }}</p>\n  `,\n})\nexport class SimpleFormComp {\n  onSubmit(f: NgForm) {\n    console.log(f.value);  // { first: '', last: '' }\n    console.log(f.valid);  // false\n  }\n}\n\nnpm package: @angular/forms\n\nNgModule: FormsModule\n\n\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html
NgModel	A										<section class='prog__container'><p>Creates a FormControl instance from a domain model and binds it\nto a form control element.\nThe FormControl instance will track the value, user interaction, and\nvalidation status of the control and keep the view synced with the model. If used\nwithin a parent form, the directive will also register itself with the form as a child\ncontrol.\n</p><pre><code>This directive can be used by itself or as part of a larger form. All you need is the\nngModel selector to activate it.\nIt accepts a domain model as an optional @Input. If you have a one-way binding\nto ngModel with [] syntax, changing the value of the domain model in the component\nclass will set the value in the view. If you have a two-way binding with [()] syntax\n(also known as 'banana-box syntax'), the value in the UI will always be synced back to\nthe domain model in your class as well.\nIf you wish to inspect the properties of the associated FormControl (like\nvalidity state), you can also export the directive into a local template variable using\nngModel as the key (ex: #myVar="ngModel"). You can then access the control using the\ndirective's control property, but most properties you'll need (like valid and dirty)\nwill fall through to the control anyway, so you can access them directly. You can see a\nfull list of properties directly available in AbstractControlDirective.\nThe following is an example of a simple standalone control using ngModel:\nimport {Component} from '@angular/core';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <input [(ngModel)]="name" #ctrl="ngModel" required>\n\n    <p>Value: {{ name }}</p>\n    <p>Valid: {{ ctrl.valid }}</p>\n\n    <button (click)="setValue()">Set value</button>\n  `,\n})\nexport class SimpleNgModelComp {\n  name: string = '';\n\n  setValue() { this.name = 'Nancy'; }\n}\nWhen using the ngModel within <form> tags, you'll also need to supply a name attribute\nso that the control can be registered with the parent form under that name.\nIt's worth noting that in the context of a parent form, you often can skip one-way or\ntwo-way binding because the parent form will sync the value for you. You can access\nits properties by exporting it into a local template variable using ngForm (ex:\n#f="ngForm"). Then you can pass it where it needs to go on submit.\nIf you do need to populate initial values into your form, using a one-way binding for\nngModel tends to be sufficient as long as you use the exported form's value rather\nthan the domain model's value on submit.\nTake a look at an example of using ngModel within a form:\nimport {Component} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form #f="ngForm" (ngSubmit)="onSubmit(f)" novalidate>\n      <input name="first" ngModel required #first="ngModel">\n      <input name="last" ngModel>\n      <button>Submit</button>\n    </form>\n\n    <p>First name value: {{ first.value }}</p>\n    <p>First name valid: {{ first.valid }}</p>\n    <p>Form value: {{ f.value | json }}</p>\n    <p>Form valid: {{ f.valid }}</p>\n  `,\n})\nexport class SimpleFormComp {\n  onSubmit(f: NgForm) {\n    console.log(f.value);  // { first: '', last: '' }\n    console.log(f.valid);  // false\n  }\n}\nTo see ngModel examples with different form control types, see:\n\nRadio buttons: RadioControlValueAccessor\nSelects: SelectControlValueAccessor\n\nnpm package: @angular/forms\nNgModule: FormsModule\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/NgModel-directive.html
NgModelGroup	A										<section class='prog__container'><p>Creates and binds a FormGroup instance to a DOM element.\n</p><pre><code>This directive can only be used as a child of NgForm (or in other words,\nwithin <form> tags).\nUse this directive if you'd like to create a sub-group within a form. This can\ncome in handy if you want to validate a sub-group of your form separately from\nthe rest of your form, or if some values in your domain model make more sense to\nconsume together in a nested object.\nPass in the name you'd like this sub-group to have and it will become the key\nfor the sub-group in the form's full value. You can also export the directive into\na local template variable using ngModelGroup (ex: #myGroup="ngModelGroup").\nimport {Component} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form #f="ngForm" (ngSubmit)="onSubmit(f)">\n      <p *ngIf="nameCtrl.invalid">Name is invalid.</p>\n\n      <div ngModelGroup="name" #nameCtrl="ngModelGroup">\n        <input name="first" [ngModel]="name.first" minlength="2">\n        <input name="last" [ngModel]="name.last" required>\n      </div>\n\n      <input name="email" ngModel> \n      <button>Submit</button>\n    </form>\n\n    <button (click)="setValue()">Set value</button>\n  `,\n})\nexport class NgModelGroupComp {\n  name = {first: 'Nancy', last: 'Drew'};\n\n  onSubmit(f: NgForm) {\n    console.log(f.value);  // {name: {first: 'Nancy', last: 'Drew'}, email: ''}\n    console.log(f.valid);  // true\n  }\n\n  setValue() { this.name = {first: 'Bess', last: 'Marvin'}; }\n}\n\nnpm package: @angular/forms\n\nNgModule: FormsModule\n\n\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/NgModelGroup-directive.html
NgSelectOption	A										<section class='prog__container'><p>Marks <option> as dynamic, so Angular can be notified when options change.\n</p><pre><code>See docs for SelectControlValueAccessor for usage examples.\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/NgSelectOption-directive.html
PatternValidator	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/PatternValidator-directive.html
RadioControlValueAccessor	A										<section class='prog__container'><p>Writes radio control values and listens to radio control changes.\nUsed by NgModel, FormControlDirective, and FormControlName\nto keep the view synced with the FormControl model.\n</p><pre><code>If you have imported the FormsModule or the ReactiveFormsModule, this\nvalue accessor will be active on any radio control that has a form directive. You do\nnot need to add a special selector to activate it.\nHow to use radio buttons with form directives\nTo use radio buttons in a template-driven form, you'll want to ensure that radio buttons\nin the same group have the same name attribute.  Radio buttons with different name\nattributes do not affect each other.\nimport {Component} from '@angular/core';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form #f="ngForm">\n      <input type="radio" value="beef" name="food" [(ngModel)]="myFood"> Beef\n      <input type="radio" value="lamb" name="food" [(ngModel)]="myFood"> Lamb\n      <input type="radio" value="fish" name="food" [(ngModel)]="myFood"> Fish\n    </form>\n\n    <p>Form value: {{ f.value | json }}</p>  <!-- {food: 'lamb' } -->\n    <p>myFood value: {{ myFood }}</p>  <!-- 'lamb' -->\n  `,\n})\nexport class RadioButtonComp {\n  myFood = 'lamb';\n}\nWhen using radio buttons in a reactive form, radio buttons in the same group should have the\nsame formControlName. You can also add a name attribute, but it's optional.\nimport {Component} from '@angular/core';\nimport {FormControl, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form [formGroup]="form">\n      <input type="radio" formControlName="food" value="beef" > Beef\n      <input type="radio" formControlName="food" value="lamb"> Lamb\n      <input type="radio" formControlName="food" value="fish"> Fish\n    </form>\n\n    <p>Form value: {{ form.value | json }}</p>  <!-- {food: 'lamb' } -->\n  `,\n})\nexport class ReactiveRadioButtonComp {\n  form = new FormGroup({\n    food: new FormControl('lamb'),\n  });\n}\n\nnpm package: @angular/forms\n\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/RadioControlValueAccessor-directive.html
ReactiveFormsModule	A										<section class='prog__container'><p>The ng module for reactive forms.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/ReactiveFormsModule-class.html
RequiredValidator	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/RequiredValidator-directive.html
SelectControlValueAccessor	A										<section class='prog__container'><p>Writes values and listens to changes on a select element.\nUsed by NgModel, FormControlDirective, and FormControlName\nto keep the view synced with the FormControl model.\n</p><pre><code>If you have imported the FormsModule or the ReactiveFormsModule, this\nvalue accessor will be active on any select control that has a form directive. You do\nnot need to add a special selector to activate it.\nHow to use select controls with form directives\nTo use a select in a template-driven form, simply add an ngModel and a name\nattribute to the main <select> tag.\nIf your option values are simple strings, you can bind to the normal value property\non the option.  If your option values happen to be objects (and you'd like to save the\nselection in your form as an object), use ngValue instead:\nimport {Component} from '@angular/core';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form #f="ngForm">\n      <select name="state" ngModel>\n        <option value="" disabled>Choose a state</option>\n        <option *ngFor="let state of states" [ngValue]="state">\n          {{ state.abbrev }}\n        </option>\n      </select>\n    </form>\n\n     <p>Form value: {{ f.value | json }}</p>\n     <!-- example value: {state: {name: 'New York', abbrev: 'NY'} } -->\n  `,\n})\nexport class SelectControlComp {\n  states = [\n    {name: 'Arizona', abbrev: 'AZ'},\n    {name: 'California', abbrev: 'CA'},\n    {name: 'Colorado', abbrev: 'CO'},\n    {name: 'New York', abbrev: 'NY'},\n    {name: 'Pennsylvania', abbrev: 'PA'},\n  ];\n}\nIn reactive forms, you'll also want to add your form directive (formControlName or\nformControl) on the main <select> tag. Like in the former example, you have the\nchoice of binding to the  value or ngValue property on the select's options.\nimport {Component} from '@angular/core';\nimport {FormControl, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form [formGroup]="form">\n      <select formControlName="state">\n        <option *ngFor="let state of states" [ngValue]="state">\n          {{ state.abbrev }}\n        </option>\n      </select>\n    </form>\n\n     <p>Form value: {{ form.value | json }}</p> \n     <!-- {state: {name: 'New York', abbrev: 'NY'} } -->\n  `,\n})\nexport class ReactiveSelectComp {\n  states = [\n    {name: 'Arizona', abbrev: 'AZ'},\n    {name: 'California', abbrev: 'CA'},\n    {name: 'Colorado', abbrev: 'CO'},\n    {name: 'New York', abbrev: 'NY'},\n    {name: 'Pennsylvania', abbrev: 'PA'},\n  ];\n\n  form = new FormGroup({\n    state: new FormControl(this.states[3]),\n  });\n}\nNote: We listen to the 'change' event because 'input' events aren't fired\nfor selects in Firefox and IE:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1024350\nhttps://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n\nnpm package: @angular/forms\n\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/SelectControlValueAccessor-directive.html
SelectMultipleControlValueAccessor	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/SelectMultipleControlValueAccessor-directive.html
Validator	A										<section class='prog__container'><p>An interface that can be implemented by classes that can act as validators.</p></section>	https://angular.io/docs/ts/latest/api/forms/index/Validator-interface.html
ValidatorFn	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/forms/index/ValidatorFn-interface.html
Validators	A										<section class='prog__container'><p>Provides a set of validators used by form controls.\nA validator is a function that processes a FormControl or collection of\ncontrols and returns a map of errors. A null map means that validation has passed.</p><pre><code>var loginControl = new FormControl("", Validators.required)\n</pre></code></section>	https://angular.io/docs/ts/latest/api/forms/index/Validators-class.html
MockBackend	A										<section class='prog__container'><p>A mock backend for testing the Http service.\nThis class can be injected in tests, and should be used to override providers\nto other backends, such as XHRBackend.\nThis method only exists in the mock implementation, not in real Backends.</p><pre><code>import {BaseRequestOptions, Http} from '@angular/http';\nimport {MockBackend} from '@angular/http/testing';\nit('should get some data', inject([AsyncTestCompleter], (async) => {\n  var connection;\n  var injector = Injector.resolveAndCreate([\n    MockBackend,\n    {provide: Http, useFactory: (backend, options) => {\n      return new Http(backend, options);\n    }, deps: [MockBackend, BaseRequestOptions]}]);\n  var http = injector.get(Http);\n  var backend = injector.get(MockBackend);\n  //Assign any newly-created connection to local variable\n  backend.connections.subscribe(c => connection = c);\n  http.request('data.json').subscribe((res) => {\n    expect(res.text()).toBe('awesome');\n    async.done();\n  });\n  connection.mockRespond(new Response('awesome'));\n}));\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/testing/index/MockBackend-class.html
MockConnection	A										<section class='prog__container'><p>Mock Connection to represent a Connection for tests.</p></section>	https://angular.io/docs/ts/latest/api/http/testing/index/MockConnection-class.html
ServerTestingModule	A										<section class='prog__container'><p>NgModule for testing.</p></section>	https://angular.io/docs/ts/latest/api/platform-server/testing/index/ServerTestingModule-class.html
platformServerTesting	A										<section class='prog__container'><p>Platform for testing</p></section>	https://angular.io/docs/ts/latest/api/platform-server/testing/index/platformServerTesting-let.html
UpgradeAdapter	A										<section class='prog__container'><p>Use UpgradeAdapter to allow AngularJS v1 and Angular v2 to coexist in a single application.\nThe UpgradeAdapter allows:\nWhen reasoning about how a hybrid application works it is useful to have a mental model which\ndescribes what is happening and explains what is happening at the lowest level.</p><pre><code>var adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\nvar module = angular.module('myExample', []);\nmodule.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n\nmodule.directive('ng1Hello', function() {\n  return {\n     scope: { title: '=' },\n     template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n  };\n});\n\n\n@Component({\n  selector: 'ng2-comp',\n  inputs: ['name'],\n  template: 'ng2[<ng1-hello [title]="name">transclude</ng1-hello>](<ng-content></ng-content>)',\n  directives:\n})\nclass Ng2Component {\n}\n\n@NgModule({\n  declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n  imports: [BrowserModule]\n})\nclass MyNg2Module {}\n\n\ndocument.body.innerHTML = '<ng2-comp name="World">project</ng2-comp>';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\n      "ng2[ng1[Hello World!](transclude)](project)");\n});\n\n</pre></code></section>	https://angular.io/docs/ts/latest/api/upgrade/index/UpgradeAdapter-class.html
UpgradeAdapterRef	A										<section class='prog__container'><p>Use UpgradeAdapterRef to control a hybrid AngularJS v1 / Angular v2 application.</p></section>	https://angular.io/docs/ts/latest/api/upgrade/index/UpgradeAdapterRef-class.html
ANALYZE_FOR_ENTRY_COMPONENTS	A										<section class='prog__container'><p>This token can be used to create a virtual provider that will populate the\nentryComponents fields of components and ng modules based on its useValue.\nAll components that are referenced in the useValue value (either directly\nor in a nested array or map) will be added to the entryComponents property.\nThe following example shows how the router can populate the entryComponents\nfield of an NgModule based on the router configuration which refers\nto components.</p><pre><code>// helper function inside the router\nfunction provideRoutes(routes) {\n  return [\n    {provide: ROUTES, useValue: routes},\n    {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n  ];\n}\n\n// user code\nlet routes = [\n  {path: '/root', component: RootComp},\n  {path: '/teams', component: TeamsComp}\n];\n\n@NgModule({\n  providers: [provideRoutes(routes)]\n})\nclass ModuleWithRoutes {}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/core/index/ANALYZE_FOR_ENTRY_COMPONENTS-let.html
APP_BOOTSTRAP_LISTENER	A										<section class='prog__container'><p>All callbacks provided via this token will be called for every component that is bootstrapped.\nSignature of the callback:\n(componentRef: ComponentRef) => void.</p></section>	https://angular.io/docs/ts/latest/api/core/index/APP_BOOTSTRAP_LISTENER-let.html
APP_ID	A										<section class='prog__container'><p>A DI Token representing a unique string id assigned to the application by Angular and used\nprimarily for prefixing application attributes and CSS styles when\nViewEncapsulation is being used.\nIf you need to avoid randomly generated value to be used as an application id, you can provide\na custom value via a DI provider  configuring the root Injector\nusing this token.</p></section>	https://angular.io/docs/ts/latest/api/core/index/APP_ID-let.html
APP_INITIALIZER	A										<section class='prog__container'><p>A function that will be executed when an application is initialized.</p></section>	https://angular.io/docs/ts/latest/api/core/index/APP_INITIALIZER-let.html
AUTO_STYLE	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/AUTO_STYLE-let.html
AfterContentChecked	A										<section class='prog__container'><p>See Lifecycle Hooks Guide.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AfterContentChecked-class.html
AfterContentInit	A										<section class='prog__container'><p>See Lifecycle Hooks Guide.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AfterContentInit-class.html
AfterViewChecked	A										<section class='prog__container'><p>See Lifecycle Hooks Guide.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AfterViewChecked-class.html
AfterViewInit	A										<section class='prog__container'><p>See Lifecycle Hooks Guide.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AfterViewInit-class.html
AnimationAnimateMetadata	A										<section class='prog__container'><p>Metadata representing the entry of animations.\nInstances of this class are provided via the animation DSL when the animate\nanimation function is called.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationAnimateMetadata-class.html
AnimationEntryMetadata	A										<section class='prog__container'><p>Metadata representing the entry of animations.\nInstances of this class are provided via the animation DSL when the trigger\nanimation function is called.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationEntryMetadata-class.html
AnimationGroupMetadata	A										<section class='prog__container'><p>Metadata representing the entry of animations.\nInstances of this class are provided via the animation DSL when the group animation\nfunction is called.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationGroupMetadata-class.html
AnimationKeyframesSequenceMetadata	A										<section class='prog__container'><p>Metadata representing the entry of animations.\nInstances of this class are provided via the animation DSL when the keyframes\nanimation function is called.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationKeyframesSequenceMetadata-class.html
AnimationMetadata	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationMetadata-class.html
AnimationPlayer	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationPlayer-class.html
AnimationSequenceMetadata	A										<section class='prog__container'><p>Metadata representing the entry of animations.\nInstances of this class are provided via the animation DSL when the sequence\nanimation function is called.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationSequenceMetadata-class.html
AnimationStateDeclarationMetadata	A										<section class='prog__container'><p>Metadata representing the entry of animations.\nInstances of this class are provided via the animation DSL when the state animation\nfunction is called.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationStateDeclarationMetadata-class.html
AnimationStateMetadata	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationStateMetadata-class.html
AnimationStateTransitionMetadata	A										<section class='prog__container'><p>Metadata representing the entry of animations.\nInstances of this class are provided via the animation DSL when the\ntransition animation function is called.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationStateTransitionMetadata-class.html
AnimationStyleMetadata	A										<section class='prog__container'><p>Metadata representing the entry of animations.\nInstances of this class are provided via the animation DSL when the style animation\nfunction is called.</p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationStyleMetadata-class.html
AnimationTransitionEvent	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationTransitionEvent-class.html
AnimationWithStepsMetadata	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/AnimationWithStepsMetadata-class.html
ApplicationInitStatus	A										<section class='prog__container'><p>A class that reflects the state of running APP_INITIALIZERs.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ApplicationInitStatus-class.html
ApplicationModule	A										<section class='prog__container'><p>This module includes the providers of @angular/core that are needed\nto bootstrap components via ApplicationRef.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ApplicationModule-class.html
ApplicationRef	A										<section class='prog__container'><p>A reference to an Angular application running on a page.\nFor more about Angular applications, see the documentation for bootstrap.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ApplicationRef-class.html
Attribute	A										<section class='prog__container'><p>Attribute decorator and metadata.</p></section>	https://angular.io/docs/ts/latest/api/core/index/Attribute-interface.html
COMPILER_OPTIONS	A										<section class='prog__container'><p>Token to provide CompilerOptions in the platform injector.</p></section>	https://angular.io/docs/ts/latest/api/core/index/COMPILER_OPTIONS-let.html
CUSTOM_ELEMENTS_SCHEMA	A										<section class='prog__container'><p>Defines a schema that will allow:</p></section>	https://angular.io/docs/ts/latest/api/core/index/CUSTOM_ELEMENTS_SCHEMA-let.html
ChangeDetectorRef	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/ChangeDetectorRef-class.html
Class	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export Class(clsDef: ClassDefinition) : Type&lt;any&gt;</code></pre><p>Provides a way for expressing ES6 classes with parameter annotations in ES5.</p>\n<h2 id="basic-example">Basic Example</h2>\n<code-example format="linenums" language="js">var Greeter = ng.Class({\n  constructor: function(name) {\n    this.name = name;\n  },\n\n  greet: function() {\n    alert('Hello ' + this.name + '!');\n  }\n});\n</code-example><p>is equivalent to ES6:</p>\n<code-example format="linenums" language="js">class Greeter {\n  constructor(name) {\n    this.name = name;\n  }\n\n  greet() {\n    alert('Hello ' + this.name + '!');\n  }\n}\n</code-example><p>or equivalent to ES5:</p>\n<code-example format="linenums" language="js">var Greeter = function (name) {\n  this.name = name;\n}\n\nGreeter.prototype.greet = function () {\n  alert('Hello ' + this.name + '!');\n}\n</code-example><h3 id="example-with-parameter-annotations">Example with parameter annotations</h3>\n<code-example format="linenums" language="js">var MyService = ng.Class({\n  constructor: [String, [new Optional(), Service], function(name, myService) {\n    ...\n  }]\n});\n</code-example><p>is equivalent to ES6:</p>\n<code-example format="linenums" language="js">class MyService {\n  constructor(name: string, @Optional() myService: Service) {\n    ...\n  }\n}\n</code-example><h3 id="example-with-inheritance">Example with inheritance</h3>\n<code-example format="linenums" language="js">var Shape = ng.Class({\n  constructor: (color) {\n    this.color = color;\n  }\n});\n\nvar Square = ng.Class({\n  extends: Shape,\n  constructor: function(color, size) {\n    Shape.call(this, color);\n    this.size = size;\n  }\n});\n</code-example></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/Class-function.html
ClassDefinition	A										<section class='prog__container'><p>Declares the interface to be used with Class.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ClassDefinition-interface.html
ClassProvider	A										<section class='prog__container'><p>Configures the Injector to return an instance of useClass for a token.\n</p></section>	https://angular.io/docs/ts/latest/api/core/index/ClassProvider-interface.html
CollectionChangeRecord	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/CollectionChangeRecord-class.html
Compiler	A										<section class='prog__container'><p>Low-level service for running the angular compiler during runtime\nto create ComponentFactorys, which\ncan later be used to create and render a Component instance.\nEach @NgModule provides an own Compiler to its injector,\nthat will use the directives/pipes of the ng module for compilation\nof components.</p></section>	https://angular.io/docs/ts/latest/api/core/index/Compiler-class.html
CompilerFactory	A										<section class='prog__container'><p>A factory for creating a Compiler</p></section>	https://angular.io/docs/ts/latest/api/core/index/CompilerFactory-class.html
ComponentFactory	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/ComponentFactory-class.html
ComponentFactoryResolver	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/ComponentFactoryResolver-class.html
ComponentRef	A										<section class='prog__container'><p>Represents an instance of a Component created via a ComponentFactory.\nComponentRef provides access to the Component Instance as well other objects related to this\nComponent Instance and allows you to destroy the Component Instance via the destroy\nmethod.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ComponentRef-class.html
DebugElement	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/DebugElement-class.html
DebugNode	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/DebugNode-class.html
DefaultIterableDiffer	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/DefaultIterableDiffer-class.html
DoCheck	A										<section class='prog__container'><p>ngDoCheck gets called to check the changes in the directives in addition to the default\nalgorithm. The default change detection algorithm looks for differences by comparing\nbound-property values by reference across change detection runs.\nNote that a directive typically should not use both DoCheck and OnChanges to respond to\nchanges on the same input, as ngOnChanges will continue to be called when the default change\ndetector detects changes.\nSee KeyValueDiffers and IterableDiffers for implementing custom dirty checking\nfor collections.\nSee Lifecycle Hooks Guide.</p></section>	https://angular.io/docs/ts/latest/api/core/index/DoCheck-class.html
ElementRef	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html
EmbeddedViewRef	A										<section class='prog__container'><p>Represents an Angular View.\nA View is a fundamental building block of the application UI. It is the smallest grouping of\nElements which are created and destroyed together.\nProperties of elements in a View can change, but the structure (number and order) of elements in\na View cannot. Changing the structure of Elements can only be done by inserting, moving or\nremoving nested Views via a ViewContainerRef. Each View can contain many View Containers.\n\nGiven this template...\nWe have two TemplateRefs:\nOuter TemplateRef:\nInner TemplateRef:\nNotice that the original template is broken down into two separate TemplateRefs.\nThe outer/inner TemplateRefs are then assembled into views like so:</p><pre><code>Count: {{items.length}}\n<ul>\n  <li *ngFor="let  item of items">{{item}}</li>\n</ul>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/core/index/EmbeddedViewRef-class.html
ErrorHandler	A										<section class='prog__container'><p>The default implementation of ErrorHandler prints error messages to the console. To\nintercept error handling, write a custom exception handler that replaces this default as\nappropriate for your app.</p><pre><code>class MyErrorHandler implements ErrorHandler {\n  handleError(error) {\n    // do something with the exception\n  }\n}\n\n@NgModule({\n  providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n})\nclass MyModule {}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/core/index/ErrorHandler-class.html
EventEmitter	A										<section class='prog__container'><p>Use by directives and components to emit custom Events.\nIn the following example, Zippy alternatively emits open and close events when its\ntitle gets clicked:\nThe events payload can be accessed by the parameter $event on the components output event\nhandler:\nUses Rx.Observable but provides an adapter to make it work as specified here:\nhttps://github.com/jhusain/observable-spec\nOnce a reference implementation of the spec is available, switch to it.</p><pre><code>@Component({\n  selector: 'zippy',\n  template: `\n  <div class="zippy">\n    <div (click)="toggle()">Toggle</div>\n    <div [hidden]="!visible">\n      <ng-content></ng-content>\n    </div>\n </div>`})\nexport class Zippy {\n  visible: boolean = true;\n  @Output() open: EventEmitter<any> = new EventEmitter();\n  @Output() close: EventEmitter<any> = new EventEmitter();\n\n  toggle() {\n    this.visible = !this.visible;\n    if (this.visible) {\n      this.open.emit(null);\n    } else {\n      this.close.emit(null);\n    }\n  }\n}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/core/index/EventEmitter-class.html
ExistingProvider	A										<section class='prog__container'><p>Configures the Injector to return a value of another useExisting token.\n</p></section>	https://angular.io/docs/ts/latest/api/core/index/ExistingProvider-interface.html
FactoryProvider	A										<section class='prog__container'><p>Configures the Injector to return a value by invoking a useFactory\nfunction.\n</p></section>	https://angular.io/docs/ts/latest/api/core/index/FactoryProvider-interface.html
ForwardRefFn	A										<section class='prog__container'><p>An interface that a function passed into forwardRef has to implement.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ForwardRefFn-interface.html
GetTestability	A										<section class='prog__container'><p>Adapter interface for retrieving the Testability service associated for a\nparticular context.</p></section>	https://angular.io/docs/ts/latest/api/core/index/GetTestability-interface.html
HostBinding	A										<section class='prog__container'><p>HostBinding decorator and metadata.</p></section>	https://angular.io/docs/ts/latest/api/core/index/HostBinding-interface.html
HostListener	A										<section class='prog__container'><p>HostBinding decorator and metadata.</p></section>	https://angular.io/docs/ts/latest/api/core/index/HostListener-interface.html
Injector	A										<section class='prog__container'><p>For more details, see the Dependency Injection Guide.\nInjector returns itself when given Injector as a token:</p><pre><code>const injector: Injector =\n    ReflectiveInjector.resolveAndCreate([{provide: 'validToken', useValue: 'Value'}]);\nexpect(injector.get('validToken')).toEqual('Value');\nexpect(() => injector.get('invalidToken')).toThrowError();\nexpect(injector.get('invalidToken', 'notFound')).toEqual('notFound');\n</pre></code></section>	https://angular.io/docs/ts/latest/api/core/index/Injector-class.html
Input	A										<section class='prog__container'><p>Input decorator and metadata.</p></section>	https://angular.io/docs/ts/latest/api/core/index/Input-interface.html
IterableDiffer	A										<section class='prog__container'><p>A strategy for tracking changes over time to an iterable. Used for NgFor to\nrespond to changes in an iterable by effecting equivalent changes in the DOM.</p></section>	https://angular.io/docs/ts/latest/api/core/index/IterableDiffer-interface.html
IterableDifferFactory	A										<section class='prog__container'><p>Provides a factory for IterableDiffer.</p></section>	https://angular.io/docs/ts/latest/api/core/index/IterableDifferFactory-interface.html
IterableDiffers	A										<section class='prog__container'><p>A repository of different iterable diffing strategies used by NgFor, NgClass, and others.</p></section>	https://angular.io/docs/ts/latest/api/core/index/IterableDiffers-class.html
KeyValueChangeRecord	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/KeyValueChangeRecord-class.html
KeyValueDiffer	A										<section class='prog__container'><p>A differ that tracks changes made to an object over time.</p></section>	https://angular.io/docs/ts/latest/api/core/index/KeyValueDiffer-interface.html
KeyValueDifferFactory	A										<section class='prog__container'><p>Provides a factory for KeyValueDiffer.</p></section>	https://angular.io/docs/ts/latest/api/core/index/KeyValueDifferFactory-interface.html
KeyValueDiffers	A										<section class='prog__container'><p>A repository of different Map diffing strategies used by NgClass, NgStyle, and others.</p></section>	https://angular.io/docs/ts/latest/api/core/index/KeyValueDiffers-class.html
LOCALE_ID	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/LOCALE_ID-let.html
ModuleWithComponentFactories	A										<section class='prog__container'><p>Combination of NgModuleFactory and ComponentFactorys.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ModuleWithComponentFactories-class.html
ModuleWithProviders	A										<section class='prog__container'><p>A wrapper around a module that also includes the providers.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ModuleWithProviders-interface.html
NO_ERRORS_SCHEMA	A										<section class='prog__container'><p>Defines a schema that will allow any property on any element.</p></section>	https://angular.io/docs/ts/latest/api/core/index/NO_ERRORS_SCHEMA-let.html
NgModule	A										<section class='prog__container'><p>NgModule decorator and metadata.</p></section>	https://angular.io/docs/ts/latest/api/core/index/NgModule-interface.html
NgModuleFactory	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/NgModuleFactory-class.html
NgModuleFactoryLoader	A										<section class='prog__container'><p>Used to load ng module factories.</p></section>	https://angular.io/docs/ts/latest/api/core/index/NgModuleFactoryLoader-class.html
NgModuleRef	A										<section class='prog__container'><p>Represents an instance of an NgModule created via a NgModuleFactory.\nNgModuleRef provides access to the NgModule Instance as well other objects related to this\nNgModule Instance.</p></section>	https://angular.io/docs/ts/latest/api/core/index/NgModuleRef-class.html
NgZone	A										<section class='prog__container'><p>An injectable service for executing work inside or outside of the Angular zone.\nThe most common use of this service is to optimize performance when starting a work consisting of\none or more asynchronous tasks that don't require UI updates or error handling to be handled by\nAngular. Such tasks can be kicked off via runOutsideAngular and if needed, these tasks\ncan reenter the Angular zone via run.</p><pre><code>import {Component, NgZone} from '@angular/core';\nimport {NgIf} from '@angular/common';\n\n@Component({\n  selector: 'ng-zone-demo'.\n  template: `\n    <h2>Demo: NgZone</h2>\n\n    <p>Progress: {{progress}}%</p>\n    <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>\n\n    <button (click)="processWithinAngularZone()">Process within Angular zone</button>\n    <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>\n  `,\n})\nexport class NgZoneDemo {\n  progress: number = 0;\n  label: string;\n\n  constructor(private _ngZone: NgZone) {}\n\n  // Loop inside the Angular zone\n  // so the UI DOES refresh after each setTimeout cycle\n  processWithinAngularZone() {\n    this.label = 'inside';\n    this.progress = 0;\n    this._increaseProgress(() => console.log('Inside Done!'));\n  }\n\n  // Loop outside of the Angular zone\n  // so the UI DOES NOT refresh after each setTimeout cycle\n  processOutsideOfAngularZone() {\n    this.label = 'outside';\n    this.progress = 0;\n    this._ngZone.runOutsideAngular(() => {\n      this._increaseProgress(() => {\n      // reenter the Angular zone and display done\n      this._ngZone.run(() => {console.log('Outside Done!') });\n    }}));\n  }\n\n  _increaseProgress(doneCallback: () => void) {\n    this.progress += 1;\n    console.log(`Current progress: ${this.progress}%`);\n\n    if (this.progress < 100) {\n      window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n    } else {\n      doneCallback();\n    }\n  }\n}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/core/index/NgZone-class.html
OnChanges	A										<section class='prog__container'><p>ngOnChanges is called right after the data-bound properties have been checked and before view\nand content children are checked if at least one of them has changed.\nThe changes parameter contains the changed properties.\nSee Lifecycle Hooks Guide.</p></section>	https://angular.io/docs/ts/latest/api/core/index/OnChanges-class.html
OnDestroy	A										<section class='prog__container'><p>ngOnDestroy callback is typically used for any custom cleanup that needs to occur when the\ninstance is destroyed.\nSee Lifecycle Hooks Guide.</p></section>	https://angular.io/docs/ts/latest/api/core/index/OnDestroy-class.html
OnInit	A										<section class='prog__container'><p>ngOnInit is called right after the directive's data-bound properties have been checked for the\nfirst time, and before any of its children have been checked. It is invoked only once when the\ndirective is instantiated.\nSee Lifecycle Hooks Guide.</p></section>	https://angular.io/docs/ts/latest/api/core/index/OnInit-class.html
OpaqueToken	A										<section class='prog__container'><p>Creates a token that can be used in a DI Provider.\nUsing an OpaqueToken is preferable to using strings as tokens because of possible collisions\ncaused by multiple providers using the same string as two different tokens.\nUsing an OpaqueToken is preferable to using an Object as tokens because it provides better\nerror messages.</p><pre><code>var t = new OpaqueToken("value");\n\nvar injector = Injector.resolveAndCreate([\n  {provide: t, useValue: "bindingValue"}\n]);\n\nexpect(injector.get(t)).toEqual("bindingValue");\n</pre></code></section>	https://angular.io/docs/ts/latest/api/core/index/OpaqueToken-class.html
Output	A										<section class='prog__container'><p>Output decorator and metadata.</p></section>	https://angular.io/docs/ts/latest/api/core/index/Output-interface.html
PACKAGE_ROOT_URL	A										<section class='prog__container'><p>A token which indicates the root directory of the application</p></section>	https://angular.io/docs/ts/latest/api/core/index/PACKAGE_ROOT_URL-let.html
PLATFORM_INITIALIZER	A										<section class='prog__container'><p>A function that will be executed when a platform is initialized.</p></section>	https://angular.io/docs/ts/latest/api/core/index/PLATFORM_INITIALIZER-let.html
Pipe	A										<section class='prog__container'><p>Pipe decorator and metadata.</p></section>	https://angular.io/docs/ts/latest/api/core/index/Pipe-interface.html
PipeTransform	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/PipeTransform-interface.html
PlatformRef	A										<section class='prog__container'><p>The Angular platform is the entry point for Angular on a web page. Each page\nhas exactly one platform, and services (such as reflection) which are common\nto every Angular application running on the page are bound in its scope.\nA page's platform is initialized implicitly when bootstrap() is called, or\nexplicitly by calling createPlatform().</p></section>	https://angular.io/docs/ts/latest/api/core/index/PlatformRef-class.html
Query	A										<section class='prog__container'><p>Base class for query metadata.\nSee ContentChildren, ContentChild, ViewChildren, ViewChild for\nmore information.</p></section>	https://angular.io/docs/ts/latest/api/core/index/Query-class.html
QueryList	A										<section class='prog__container'><p>An unmodifiable list of items that Angular keeps up to date when the state\nof the application changes.\nThe type of object that Query and ViewQueryMetadata provide.\nImplements an iterable interface, therefore it can be used in both ES6\njavascript for (var i of items) loops as well as in Angular templates with\n*ngFor="let i of myList".\nChanges can be observed by subscribing to the changes Observable.\nNOTE: In the future this class will implement an Observable interface.</p><pre><code>@Component({...})\nclass Container {\n  @ViewChildren(Item) items:QueryList<Item>;\n}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/core/index/QueryList-class.html
ReflectiveInjector	A										<section class='prog__container'><p>A ReflectiveDependency injection container used for instantiating objects and resolving\ndependencies.\nAn Injector is a replacement for a new operator, which can automatically resolve the\nconstructor dependencies.\nIn typical use, application code asks for the dependencies in the constructor and they are\nresolved by the Injector.\nThe following example creates an Injector configured to create Engine and Car.\nNotice, we don't use the new operator because we explicitly want to have the Injector\nresolve all of the object's dependencies automatically.</p><pre><code>@Injectable()\nclass Engine {\n}\n\n@Injectable()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\nvar car = injector.get(Car);\nexpect(car instanceof Car).toBe(true);\nexpect(car.engine instanceof Engine).toBe(true);\n</pre></code></section>	https://angular.io/docs/ts/latest/api/core/index/ReflectiveInjector-class.html
ReflectiveKey	A										<section class='prog__container'><p>A unique object used for retrieving items from the ReflectiveInjector.\nKeys have:\nKey is used internally by ReflectiveInjector because its system-wide unique id allows\nthe\ninjector to store created objects in a more efficient way.\nKey should not be created directly. ReflectiveInjector creates keys automatically when\nresolving\nproviders.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ReflectiveKey-class.html
RenderComponentType	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/RenderComponentType-class.html
Renderer	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/Renderer-class.html
ResolvedReflectiveFactory	A										<section class='prog__container'><p>An internal resolved representation of a factory function created by resolving Provider.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ResolvedReflectiveFactory-class.html
ResolvedReflectiveProvider	A										<section class='prog__container'><p>An internal resolved representation of a Provider used by the Injector.\nIt is usually created automatically by Injector.resolveAndCreate.\nIt can be created manually, as follows:</p></section>	https://angular.io/docs/ts/latest/api/core/index/ResolvedReflectiveProvider-interface.html
RootRenderer	A										<section class='prog__container'><p>Injectable service that provides a low-level interface for modifying the UI.\nUse this service to bypass Angular's templating and make custom UI changes that can't be\nexpressed declaratively. For example if you need to set a property or an attribute whose name is\nnot statically known, use setElementProperty or setElementAttribute\nrespectively.\nIf you are implementing a custom renderer, you must implement this interface.\nThe default Renderer implementation is DomRenderer. Also available is WebWorkerRenderer.</p></section>	https://angular.io/docs/ts/latest/api/core/index/RootRenderer-class.html
Sanitizer	A										<section class='prog__container'><p>Sanitizer is used by the views to sanitize potentially dangerous values.</p></section>	https://angular.io/docs/ts/latest/api/core/index/Sanitizer-class.html
SchemaMetadata	A										<section class='prog__container'><p>Interface for schema definitions in @NgModules.</p></section>	https://angular.io/docs/ts/latest/api/core/index/SchemaMetadata-interface.html
SimpleChange	A										<section class='prog__container'><p>Represents a basic change from a previous to a new value.</p></section>	https://angular.io/docs/ts/latest/api/core/index/SimpleChange-class.html
SimpleChanges	A										<section class='prog__container'><p>A changes object whose keys are property names and\nvalues are instances of SimpleChange. See OnChanges</p></section>	https://angular.io/docs/ts/latest/api/core/index/SimpleChanges-interface.html
SystemJsNgModuleLoader	A										<section class='prog__container'><p>NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory</p></section>	https://angular.io/docs/ts/latest/api/core/index/SystemJsNgModuleLoader-class.html
SystemJsNgModuleLoaderConfig	A										<section class='prog__container'><p>Configuration for SystemJsNgModuleLoader.\ntoken.</p></section>	https://angular.io/docs/ts/latest/api/core/index/SystemJsNgModuleLoaderConfig-class.html
TRANSLATIONS	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/TRANSLATIONS-let.html
TRANSLATIONS_FORMAT	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/TRANSLATIONS_FORMAT-let.html
TemplateRef	A										<section class='prog__container'><p>Represents an Embedded Template that can be used to instantiate Embedded Views.\nYou can access a TemplateRef, in two ways. Via a directive placed on a <template> element (or\ndirective prefixed with *) and have the TemplateRef for this Embedded View injected into the\nconstructor of the directive using the TemplateRef Token. Alternatively you can query for the\nTemplateRef from a Component or a Directive via Query.\nTo instantiate Embedded Views based on a Template, use\nViewContainerRef, which will create the View and attach it to the\nView Container.</p></section>	https://angular.io/docs/ts/latest/api/core/index/TemplateRef-class.html
Testability	A										<section class='prog__container'><p>The Testability service provides testing hooks that can be accessed from\nthe browser and by services such as Protractor. Each bootstrapped Angular\napplication on the page will have an instance of Testability.</p></section>	https://angular.io/docs/ts/latest/api/core/index/Testability-class.html
TestabilityRegistry	A										<section class='prog__container'><p>A global registry of Testability instances for specific elements.</p></section>	https://angular.io/docs/ts/latest/api/core/index/TestabilityRegistry-class.html
TrackByFn	A										<section class='prog__container'><p>An optional function passed into NgFor that defines how to track\nitems in an iterable (e.g. by index or id)</p></section>	https://angular.io/docs/ts/latest/api/core/index/TrackByFn-interface.html
TypeProvider	A										<section class='prog__container'><p>Configures the Injector to return an instance of Type when `Type' is used\nas token.\n</p></section>	https://angular.io/docs/ts/latest/api/core/index/TypeProvider-interface.html
ValueProvider	A										<section class='prog__container'><p>Configures the Injector to return a value for a token.\n</p></section>	https://angular.io/docs/ts/latest/api/core/index/ValueProvider-interface.html
ViewContainerRef	A										<section class='prog__container'><p>Represents a container where one or more Views can be attached.\nThe container can contain two kinds of Views. Host Views, created by instantiating a\nComponent via createComponent, and Embedded Views, created by instantiating an\nEmbedded Template via createEmbeddedView.\nThe location of the View Container within the containing View is specified by the Anchor\nelement. Each View Container can have only one Anchor Element and each Anchor Element can only\nhave a single View Container.\nRoot elements of Views attached to this container become siblings of the Anchor Element in\nthe Rendered View.\nTo access a ViewContainerRef of an Element, you can either place a Directive injected\nwith ViewContainerRef on the Element, or you obtain it via a ViewChild query.</p></section>	https://angular.io/docs/ts/latest/api/core/index/ViewContainerRef-class.html
ViewRef	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/core/index/ViewRef-class.html
WrappedValue	A										<section class='prog__container'><p>Indicates that the result of a Pipe transformation has changed even though the\nreference\nhas not changed.\nThe wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\nExample:</p><pre><code>if (this._latestValue === this._latestReturnedValue) {\n   return this._latestReturnedValue;\n } else {\n   this._latestReturnedValue = this._latestValue;\n   return WrappedValue.wrap(this._latestValue); // this will force update\n }\n</pre></code></section>	https://angular.io/docs/ts/latest/api/core/index/WrappedValue-class.html
WtfScopeFn	A										<section class='prog__container'><p>A scope function for the Web Tracing Framework (WTF).</p></section>	https://angular.io/docs/ts/latest/api/core/index/WtfScopeFn-interface.html
animate	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export animate(timing: string | number, styles?: AnimationStyleMetadata | AnimationKeyframesSequenceMetadata) : AnimationAnimateMetadata</code></pre><p><code>animate</code> is an animation-specific function that is designed to be used inside of Angular2's\nanimation\nDSL language. If this information is new, please navigate to the\n<a href="Component-decorator.html#animations-anchor">component animations metadata\npage</a> to gain a better understanding of how animations in Angular2 are used.</p>\n<p><code>animate</code> specifies an animation step that will apply the provided <code>styles</code> data for a given\namount of\ntime based on the provided <code>timing</code> expression value. Calls to <code>animate</code> are expected to be\nused within <a href="sequence-function.html">an animation sequence</a>, <a href="group-function.html">group</a>, or <a href="transition-function.html">transition</a>.</p>\n<h3 id="usage">Usage</h3>\n<p>The <code>animate</code> function accepts two input parameters: <code>timing</code> and <code>styles</code>:</p>\n<ul>\n<li><code>timing</code> is a string based value that can be a combination of a duration with optional\ndelay and easing values. The format for the expression breaks down to <code>duration delay easing</code>\n(therefore a value such as <code>1s 100ms ease-out</code> will be parse itself into <code>duration=1000,\ndelay=100, easing=ease-out</code>.\nIf a numeric value is provided then that will be used as the <code>duration</code> value in millisecond\nform.</li>\n<li><code>styles</code> is the style input data which can either be a call to <a href="style-function.html">style</a> or <a href="keyframes-function.html">keyframes</a>.\nIf left empty then the styles from the destination state will be collected and used (this is\nuseful when\ndescribing an animation step that will complete an animation by <a href="transition-function.html#the-final-animate-call">animating to the final state</a>).</li>\n</ul>\n<code-example format="linenums" language="typescript">// various functions for specifying timing data\nanimate(500, style(...))\nanimate("1s", style(...))\nanimate("100ms 0.5s", style(...))\nanimate("5s ease", style(...))\nanimate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))\n\n// either style() of keyframes() can be used\nanimate(500, style({ background: "red" }))\nanimate(500, keyframes([\n  style({ background: "blue" })),\n  style({ background: "red" }))\n])\n</code-example><h3 id="example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-">Example (<a href="http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview">live demo</a>)</h3>\n<div class="code-example"><code-example format="linenums" language="ts">import {Component, NgModule, animate, state, style, transition, trigger} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@Component({\n  selector: 'example-app',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)="expand()"&gt;Open&lt;/button&gt;\n    &lt;button (click)="collapse()"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class="toggle-container" [@openClose]="stateExpression"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n\n@NgModule({imports: [BrowserModule], declarations: [MyExpandoCmp], bootstrap: [MyExpandoCmp]})\nexport class AppModule {\n}\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/animate-function.html
asNativeElements	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export asNativeElements(debugEls: DebugElement[]) : any</code></pre></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/asNativeElements-function.html
assertPlatform	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export assertPlatform(requiredToken: any) : PlatformRef</code></pre><p>Checks that there currently is a platform\nwhich contains the given token as a provider.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/index/assertPlatform-function.html
createPlatform	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export createPlatform(injector: Injector) : PlatformRef</code></pre><p>Creates a platform.\nPlatforms have to be eagerly created via this function.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/index/createPlatform-function.html
createPlatformFactory	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export createPlatformFactory(parentPlaformFactory: (extraProviders?: Provider[]) =&gt; PlatformRef, name: string, providers?: Provider[]) : (extraProviders?: Provider[]) =&gt; PlatformRef</code></pre><p>Creates a factory for a platform</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/index/createPlatformFactory-function.html
destroyPlatform	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export destroyPlatform() : void</code></pre><p>Destroy the existing platform.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/index/destroyPlatform-function.html
enableProdMode	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export enableProdMode() : void</code></pre><p>Disable Angular's development mode, which turns off assertions and other\nchecks within the framework.</p>\n<p>One important assertion this disables verifies that a change detection pass\ndoes not result in additional changes to any bindings (also known as\nunidirectional data flow).</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/index/enableProdMode-function.html
forwardRef	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export forwardRef(forwardRefFn: ForwardRefFn) : Type&lt;any&gt;</code></pre><p>Allows to refer to references which are not yet defined.</p>\n<p>For instance, <code>forwardRef</code> is used when the <code>token</code> which we need to refer to for the purposes of\nDI is declared,\nbut not yet defined. It is also used when the <code>token</code> which we use when creating a query is not\nyet defined.</p>\n<h3 id="example">Example</h3>\n<div class="code-example"><code-example format="linenums" language="ts">class Door {\n  lock: Lock;\n\n  // Door attempts to inject Lock, despite it not being defined yet.\n  // forwardRef makes this possible.\n  constructor(@Inject(forwardRef(() =&gt; Lock)) lock: Lock) { this.lock = lock; }\n}\n\n// Only at this point Lock is defined.\nclass Lock {}\n\nlet injector = ReflectiveInjector.resolveAndCreate([Door, Lock]);\nlet door = injector.get(Door);\nexpect(door instanceof Door).toBeTruthy();\nexpect(door.lock instanceof Lock).toBeTruthy();\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/forwardRef-function.html
getDebugNode	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export getDebugNode(nativeNode: any) : DebugNode</code></pre></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/getDebugNode-function.html
getModuleFactory	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export getModuleFactory(id: string) : NgModuleFactory&lt;any&gt;</code></pre><p>Returns the NgModuleFactory with the given id, if it exists and has been loaded.\nFactories for modules that do not specify an <code>id</code> cannot be retrieved. Throws if the module\ncannot be found.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/index/getModuleFactory-function.html
getPlatform	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export getPlatform() : PlatformRef</code></pre><p>Returns the current platform.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/index/getPlatform-function.html
group	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export group(steps: AnimationMetadata[]) : AnimationGroupMetadata</code></pre><p><code>group</code> is an animation-specific function that is designed to be used inside of Angular2's\nanimation\nDSL language. If this information is new, please navigate to the\n<a href="Component-decorator.html#animations-anchor">component animations metadata\npage</a> to gain a better understanding of how animations in Angular2 are used.</p>\n<p><code>group</code> specifies a list of animation steps that are all run in parallel. Grouped animations\nare useful when a series of styles must be animated/closed off\nat different statrting/ending times.</p>\n<p>The <code>group</code> function can either be used within a <a href="sequence-function.html">sequence</a> or a <a href="transition-function.html">transition</a>\nand it will only continue to the next instruction once all of the inner animation steps\nhave completed.</p>\n<h3 id="usage">Usage</h3>\n<p>The <code>steps</code> data that is passed into the <code>group</code> animation function can either consist\nof <a href="style-function.html">style</a> or <a href="animate-function.html">animate</a> function calls. Each call to <code>style()</code> or\n<code>animate()</code>\nwithin a group will be executed instantly (use <a href="keyframes-function.html">keyframes</a> or a\n<a href="animate-function.html#usage">animate() with a delay value</a> to offset styles to be applied at a later\ntime).</p>\n<code-example format="linenums" language="typescript">group([\n  animate("1s", { background: "black" }))\n  animate("2s", { color: "white" }))\n])\n</code-example><h3 id="example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-">Example (<a href="http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview">live demo</a>)</h3>\n<div class="code-example"><code-example format="linenums" language="ts">import {Component, NgModule, animate, state, style, transition, trigger} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@Component({\n  selector: 'example-app',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)="expand()"&gt;Open&lt;/button&gt;\n    &lt;button (click)="collapse()"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class="toggle-container" [@openClose]="stateExpression"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n\n@NgModule({imports: [BrowserModule], declarations: [MyExpandoCmp], bootstrap: [MyExpandoCmp]})\nexport class AppModule {\n}\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/group-function.html
isDevMode	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export isDevMode() : boolean</code></pre><p>Returns whether Angular is in development mode. After called once,\nthe value is locked and won't change any more.</p>\n<p>By default, this is true, unless a user calls <code>enableProdMode</code> before calling this.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/index/isDevMode-function.html
keyframes	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export keyframes(steps: AnimationStyleMetadata[]) : AnimationKeyframesSequenceMetadata</code></pre><p><code>keyframes</code> is an animation-specific function that is designed to be used inside of Angular2's\nanimation\nDSL language. If this information is new, please navigate to the\n<a href="Component-decorator.html#animations-anchor">component animations metadata\npage</a> to gain a better understanding of how animations in Angular2 are used.</p>\n<p><code>keyframes</code> specifies a collection of <a href="style-function.html">style</a> entries each optionally characterized\nby an <code>offset</code> value.</p>\n<h3 id="usage">Usage</h3>\n<p>The <code>keyframes</code> animation function is designed to be used alongside the <a href="animate-function.html">animate</a>\nanimation function. Instead of applying animations from where they are\ncurrently to their destination, keyframes can describe how each style entry is applied\nand at what point within the animation arc (much like CSS Keyframe Animations do).</p>\n<p>For each <code>style()</code> entry an <code>offset</code> value can be set. Doing so allows to specifiy at\nwhat percentage of the animate time the styles will be applied.</p>\n<code-example format="linenums" language="typescript">// the provided offset values describe when each backgroundColor value is applied.\nanimate("5s", keyframes([\n  style({ backgroundColor: "red", offset: 0 }),\n  style({ backgroundColor: "blue", offset: 0.2 }),\n  style({ backgroundColor: "orange", offset: 0.3 }),\n  style({ backgroundColor: "black", offset: 1 })\n]))\n</code-example><p>Alternatively, if there are no <code>offset</code> values used within the style entries then the offsets\nwill\nbe calculated automatically.</p>\n<code-example format="linenums" language="typescript">animate("5s", keyframes([\n  style({ backgroundColor: "red" }) // offset = 0\n  style({ backgroundColor: "blue" }) // offset = 0.33\n  style({ backgroundColor: "orange" }) // offset = 0.66\n  style({ backgroundColor: "black" }) // offset = 1\n]))\n</code-example><h3 id="example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-">Example (<a href="http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview">live demo</a>)</h3>\n<div class="code-example"><code-example format="linenums" language="ts">import {Component, NgModule, animate, state, style, transition, trigger} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@Component({\n  selector: 'example-app',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)="expand()"&gt;Open&lt;/button&gt;\n    &lt;button (click)="collapse()"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class="toggle-container" [@openClose]="stateExpression"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n\n@NgModule({imports: [BrowserModule], declarations: [MyExpandoCmp], bootstrap: [MyExpandoCmp]})\nexport class AppModule {\n}\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/keyframes-function.html
platformCore	A										<section class='prog__container'><p>This platform has to be included in any other platform</p></section>	https://angular.io/docs/ts/latest/api/core/index/platformCore-let.html
resolveForwardRef	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export resolveForwardRef(type: any) : any</code></pre><p>Lazily retrieves the reference value from a forwardRef.</p>\n<p>Acts as the identity function when given a non-forward-ref value.</p>\n<h3 id="example-live-demo-http-plnkr-co-edit-gu72mjrk1fiodchcmidr-p-preview-">Example (<a href="http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview">live demo</a>)</h3>\n<div class="code-example"><code-example format="linenums" language="ts">let ref = forwardRef(() =&gt; 'refValue');\nexpect(resolveForwardRef(ref)).toEqual('refValue');\nexpect(resolveForwardRef('regularValue')).toEqual('regularValue');\n</code-example></div><p>See: <a href="forwardRef-function.html"><code>forwardRef</code></a></p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/index/resolveForwardRef-function.html
sequence	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export sequence(steps: AnimationMetadata[]) : AnimationSequenceMetadata</code></pre><p><code>sequence</code> is an animation-specific function that is designed to be used inside of Angular2's\nanimation\nDSL language. If this information is new, please navigate to the\n<a href="Component-decorator.html#animations-anchor">component animations metadata\npage</a> to gain a better understanding of how animations in Angular2 are used.</p>\n<p><code>sequence</code> Specifies a list of animation steps that are run one by one. (<code>sequence</code> is used\nby default when an array is passed as animation data into <a href="transition-function.html">transition</a>.)</p>\n<p>The <code>sequence</code> function can either be used within a <a href="group-function.html">group</a> or a <a href="transition-function.html">transition</a>\nand it will only continue to the next instruction once each of the inner animation steps\nhave completed.</p>\n<p>To perform animation styling in parallel with other animation steps then\nhave a look at the <a href="group-function.html">group</a> animation function.</p>\n<h3 id="usage">Usage</h3>\n<p>The <code>steps</code> data that is passed into the <code>sequence</code> animation function can either consist\nof <a href="style-function.html">style</a> or <a href="animate-function.html">animate</a> function calls. A call to <code>style()</code> will apply\nthe\nprovided styling data immediately while a call to <code>animate()</code> will apply its styling\ndata over a given time depending on its timing data.</p>\n<code-example format="linenums" language="typescript">sequence([\n  style({ opacity: 0 })),\n  animate("1s", { opacity: 1 }))\n])\n</code-example><h3 id="example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-">Example (<a href="http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview">live demo</a>)</h3>\n<div class="code-example"><code-example format="linenums" language="ts">import {Component, NgModule, animate, state, style, transition, trigger} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@Component({\n  selector: 'example-app',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)="expand()"&gt;Open&lt;/button&gt;\n    &lt;button (click)="collapse()"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class="toggle-container" [@openClose]="stateExpression"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n\n@NgModule({imports: [BrowserModule], declarations: [MyExpandoCmp], bootstrap: [MyExpandoCmp]})\nexport class AppModule {\n}\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/sequence-function.html
setTestabilityGetter	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export setTestabilityGetter(getter: GetTestability) : void</code></pre><p>Set the <a href="GetTestability-interface.html"><code>GetTestability</code></a> implementation used by the Angular testing framework.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/core/index/setTestabilityGetter-function.html
state	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export state(stateNameExpr: string, styles: AnimationStyleMetadata) : AnimationStateDeclarationMetadata</code></pre><p><code>state</code> is an animation-specific function that is designed to be used inside of Angular2's\nanimation\nDSL language. If this information is new, please navigate to the\n<a href="Component-decorator.html#animations-anchor">component animations metadata\npage</a> to gain a better understanding of how animations in Angular2 are used.</p>\n<p><code>state</code> declares an animation state within the given trigger. When a state is\nactive within a component then its associated styles will persist on\nthe element that the trigger is attached to (even when the animation ends).</p>\n<p>To animate between states, have a look at the animation <a href="transition-function.html">transition</a>\nDSL function. To register states to an animation trigger please have a look\nat the <a href="trigger-function.html">trigger</a> function.</p>\n<h4 id="the-void-state">The <code>void</code> state</h4>\n<p>The <code>void</code> state value is a reserved word that angular uses to determine when the element is not\napart\nof the application anymore (e.g. when an <code>ngIf</code> evaluates to false then the state of the\nassociated element\nis void).</p>\n<h4 id="the-default-state">The <code>*</code> (default) state</h4>\n<p>The <code>*</code> state (when styled) is a fallback state that will be used if\nthe state that is being animated is not declared within the trigger.</p>\n<h3 id="usage">Usage</h3>\n<p><code>state</code> will declare an animation state with its associated styles\nwithin the given trigger.</p>\n<ul>\n<li><code>stateNameExpr</code> can be one or more state names separated by commas.</li>\n<li><code>styles</code> refers to the <a href="style-function.html">styling data</a> that will be persisted on the element once\nthe state\nhas been reached.</li>\n</ul>\n<code-example format="linenums" language="typescript">// "void" is a reserved name for a state and is used to represent\n// the state in which an element is detached from from the application.\nstate("void", style({ height: 0 }))\n\n// user-defined states\nstate("closed", style({ height: 0 }))\nstate("open, visible", style({ height: "*" }))\n</code-example><h3 id="example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-">Example (<a href="http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview">live demo</a>)</h3>\n<div class="code-example"><code-example format="linenums" language="ts">import {Component, NgModule, animate, state, style, transition, trigger} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@Component({\n  selector: 'example-app',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)="expand()"&gt;Open&lt;/button&gt;\n    &lt;button (click)="collapse()"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class="toggle-container" [@openClose]="stateExpression"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n\n@NgModule({imports: [BrowserModule], declarations: [MyExpandoCmp], bootstrap: [MyExpandoCmp]})\nexport class AppModule {\n}\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/state-function.html
style	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export style(tokens: string | {[key: string]: string | number} |\n    Array&lt;string|{[key: string]: string | number}&gt;) : AnimationStyleMetadata</code></pre><p><code>style</code> is an animation-specific function that is designed to be used inside of Angular2's\nanimation\nDSL language. If this information is new, please navigate to the\n<a href="Component-decorator.html#animations-anchor">component animations metadata\npage</a> to gain a better understanding of how animations in Angular2 are used.</p>\n<p><code>style</code> declares a key/value object containing CSS properties/styles that can then\nbe used for <a href="state-function.html">animation states</a>, within an <a href="sequence-function.html">animation sequence</a>, or as\nstyling data for both <a href="animate-function.html">animate</a> and <a href="keyframes-function.html">keyframes</a>.</p>\n<h3 id="usage">Usage</h3>\n<p><code>style</code> takes in a key/value string map as data and expects one or more CSS property/value\npairs to be defined.</p>\n<code-example format="linenums" language="typescript">// string values are used for css properties\nstyle({ background: "red", color: "blue" })\n\n// numerical (pixel) values are also supported\nstyle({ width: 100, height: 0 })\n</code-example><h4 id="auto-styles-using-">Auto-styles (using <code>*</code>)</h4>\n<p>When an asterix (<code>*</code>) character is used as a value then it will be detected from the element\nbeing animated\nand applied as animation data when the animation starts.</p>\n<p>This feature proves useful for a state depending on layout and/or environment factors; in such\ncases\nthe styles are calculated just before the animation starts.</p>\n<code-example format="linenums" language="typescript">// the steps below will animate from 0 to the\n// actual height of the element\nstyle({ height: 0 }),\nanimate("1s", style({ height: "*" }))\n</code-example><h3 id="example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-">Example (<a href="http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview">live demo</a>)</h3>\n<div class="code-example"><code-example format="linenums" language="ts">import {Component, NgModule, animate, state, style, transition, trigger} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@Component({\n  selector: 'example-app',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)="expand()"&gt;Open&lt;/button&gt;\n    &lt;button (click)="collapse()"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class="toggle-container" [@openClose]="stateExpression"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n\n@NgModule({imports: [BrowserModule], declarations: [MyExpandoCmp], bootstrap: [MyExpandoCmp]})\nexport class AppModule {\n}\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/style-function.html
transition	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export transition(stateChangeExpr: string, steps: AnimationMetadata | AnimationMetadata[]) : AnimationStateTransitionMetadata</code></pre><p><code>transition</code> is an animation-specific function that is designed to be used inside of Angular2's\nanimation\nDSL language. If this information is new, please navigate to the\n<a href="Component-decorator.html#animations-anchor">component animations metadata\npage</a> to gain a better understanding of how animations in Angular2 are used.</p>\n<p><code>transition</code> declares the <a href="sequence-function.html">sequence of animation steps</a> that will be run when the\nprovided\n<code>stateChangeExpr</code> value is satisfied. The <code>stateChangeExpr</code> consists of a <code>state1 =&gt; state2</code>\nwhich consists\nof two known states (use an asterix (<code>*</code>) to refer to a dynamic starting and/or ending state).</p>\n<p>Animation transitions are placed within an <a href="trigger-function.html">animation trigger</a>. For an transition\nto animate to\na state value and persist its styles then one or more <a href="state-function.html">animation states</a> is expected\nto be defined.</p>\n<h3 id="usage">Usage</h3>\n<p>An animation transition is kicked off the <code>stateChangeExpr</code> predicate evaluates to true based on\nwhat the\nprevious state is and what the current state has become. In other words, if a transition is\ndefined that\nmatches the old/current state criteria then the associated animation will be triggered.</p>\n<code-example format="linenums" language="typescript">// all transition/state changes are defined within an animation trigger\ntrigger("myAnimationTrigger", [\n  // if a state is defined then its styles will be persisted when the\n  // animation has fully completed itself\n  state("on", style({ background: "green" })),\n  state("off", style({ background: "grey" })),\n\n  // a transition animation that will be kicked off when the state value\n  // bound to "myAnimationTrigger" changes from "on" to "off"\n  transition("on =&gt; off", animate(500)),\n\n  // it is also possible to do run the same animation for both directions\n  transition("on &lt;=&gt; off", animate(500)),\n\n  // or to define multiple states pairs separated by commas\n  transition("on =&gt; off, off =&gt; void", animate(500)),\n\n  // this is a catch-all state change for when an element is inserted into\n  // the page and the destination state is unknown\n  transition("void =&gt; *", [\n    style({ opacity: 0 }),\n    animate(500)\n  ]),\n\n  // this will capture a state change between any states\n  transition("* =&gt; *", animate("1s 0s")),\n])\n</code-example><p>The template associated with this component will make use of the <code>myAnimationTrigger</code>\nanimation trigger by binding to an element within its template code.</p>\n<code-example format="linenums" language="html">&lt;!-- somewhere inside of my-component-tpl.html --&gt;\n&lt;div [@myAnimationTrigger]="myStatusExp"&gt;...&lt;/div&gt;\n</code-example><h4 id="the-final-animate-call">The final <code>animate</code> call</h4>\n<p>If the final step within the transition steps is a call to <code>animate()</code> that <strong>only</strong>\nuses a timing value with <strong>no style data</strong> then it will be automatically used as the final\nanimation\narc for the element to animate itself to the final state. This involves an automatic mix of\nadding/removing CSS styles so that the element will be in the exact state it should be for the\napplied state to be presented correctly.</p>\n<code-example format="linenums" language="js">// start off by hiding the element, but make sure that it animates properly to whatever state\n// is currently active for "myAnimationTrigger"\ntransition("void =&gt; *", [\n  style({ opacity: 0 }),\n  animate(500)\n])\n</code-example><h3 id="transition-aliases-enter-and-leave-">Transition Aliases (<code>:enter</code> and <code>:leave</code>)</h3>\n<p>Given that enter (insertion) and leave (removal) animations are so common,\nthe <code>transition</code> function accepts both <code>:enter</code> and <code>:leave</code> values which\nare aliases for the <code>void =&gt; *</code> and <code>* =&gt; void</code> state changes.</p>\n<code-example format="linenums" language="js">transition(":enter", [\n  style({ opacity: 0 }),\n  animate(500, style({ opacity: 1 }))\n])\ntransition(":leave", [\n  animate(500, style({ opacity: 0 }))\n])\n</code-example><h3 id="example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-">Example (<a href="http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview">live demo</a>)</h3>\n<div class="code-example"><code-example format="linenums" language="ts">import {Component, NgModule, animate, state, style, transition, trigger} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@Component({\n  selector: 'example-app',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)="expand()"&gt;Open&lt;/button&gt;\n    &lt;button (click)="collapse()"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class="toggle-container" [@openClose]="stateExpression"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n\n@NgModule({imports: [BrowserModule], declarations: [MyExpandoCmp], bootstrap: [MyExpandoCmp]})\nexport class AppModule {\n}\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/transition-function.html
trigger	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export trigger(name: string, animation: AnimationMetadata[]) : AnimationEntryMetadata</code></pre><p><code>trigger</code> is an animation-specific function that is designed to be used inside of Angular2's\nanimation\nDSL language. If this information is new, please navigate to the\n<a href="Component-decorator.html#animations-anchor">component animations metadata\npage</a> to gain a better understanding of how animations in Angular2 are used.</p>\n<p><code>trigger</code> Creates an animation trigger which will a list of <a href="state-function.html">state</a> and <a href="transition-function.html">transition</a>\nentries that will be evaluated when the expression bound to the trigger changes.</p>\n<p>Triggers are registered within the component annotation data under the\n<a href="Component-decorator.html#animations-anchor">animations section</a>. An animation trigger can\nbe placed on an element within a template by referencing the name of the\ntrigger followed by the expression value that the trigger is bound to\n(in the form of <code>[@triggerName]="expression"</code>.</p>\n<h3 id="usage">Usage</h3>\n<p><code>trigger</code> will create an animation trigger reference based on the provided <code>name</code> value.\nThe provided <code>animation</code> value is expected to be an array consisting of <a href="state-function.html">state</a> and\n<a href="transition-function.html">transition</a>\ndeclarations.</p>\n<code-example format="linenums" language="typescript">@Component({\n  selector: 'my-component',\n  templateUrl: 'my-component-tpl.html',\n  animations: [\n    trigger("myAnimationTrigger", [\n      state(...),\n      state(...),\n      transition(...),\n      transition(...)\n    ])\n  ]\n})\nclass MyComponent {\n  myStatusExp = "something";\n}\n</code-example><p>The template associated with this component will make use of the <code>myAnimationTrigger</code>\nanimation trigger by binding to an element within its template code.</p>\n<code-example format="linenums" language="html">&lt;!-- somewhere inside of my-component-tpl.html --&gt;\n&lt;div [@myAnimationTrigger]="myStatusExp"&gt;...&lt;/div&gt;\n</code-example><h3 id="example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-">Example (<a href="http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview">live demo</a>)</h3>\n<div class="code-example"><code-example format="linenums" language="ts">import {Component, NgModule, animate, state, style, transition, trigger} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@Component({\n  selector: 'example-app',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)="expand()"&gt;Open&lt;/button&gt;\n    &lt;button (click)="collapse()"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class="toggle-container" [@openClose]="stateExpression"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n\n@NgModule({imports: [BrowserModule], declarations: [MyExpandoCmp], bootstrap: [MyExpandoCmp]})\nexport class AppModule {\n}\n</code-example></div></div></p></section>	https://angular.io/docs/ts/latest/api/core/index/trigger-function.html
RouterTestingModule	A										<section class='prog__container'><p>The modules sets up the router to be used for testing.\nIt provides spy implementations of Location, LocationStrategy, and NgModuleFactoryLoader.</p></section>	https://angular.io/docs/ts/latest/api/router/testing/index/RouterTestingModule-class.html
SpyNgModuleFactoryLoader	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/testing/index/SpyNgModuleFactoryLoader-class.html
setupTestingRouter	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export setupTestingRouter(urlSerializer: UrlSerializer, outletMap: RouterOutletMap, location: Location, loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][])</code></pre><p>Router setup factory function used for testing.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/router/testing/index/setupTestingRouter-function.html
ServerModule	A										<section class='prog__container'><p>The ng module for the server.</p></section>	https://angular.io/docs/ts/latest/api/platform-server/index/ServerModule-class.html
platformDynamicServer	A										<section class='prog__container'><p>The server platform that supports the runtime compiler.</p></section>	https://angular.io/docs/ts/latest/api/platform-server/index/platformDynamicServer-let.html
platformServer	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-server/index/platformServer-let.html
APP_BASE_HREF	A										<section class='prog__container'><p>The APP_BASE_HREF token represents the base href to be used with the\nPathLocationStrategy.\nIf you're using PathLocationStrategy, you must provide a provider to a string\nrepresenting the URL prefix that should be preserved when generating and recognizing\nURLs.</p><pre><code>import {Component, NgModule} from '@angular/core';\nimport {APP_BASE_HREF} from '@angular/common';\n\n@NgModule({\n  providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n})\nclass AppModule {}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/APP_BASE_HREF-let.html
AsyncPipe	A										<section class='prog__container'><p>Unwraps a value from an asynchronous primitive.\n\nThe async pipe subscribes to an Observable or Promise and returns the latest value it has\nemitted. When a new value is emitted, the async pipe marks the component to be checked for\nchanges. When the component gets destroyed, the async pipe unsubscribes automatically to avoid\npotential memory leaks.</p><pre><code>observable_or_promise_expression | async\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/AsyncPipe-pipe.html
CommonModule	A										<section class='prog__container'><p>The module that includes all the basic Angular directives like NgIf, NgFor, ...</p></section>	https://angular.io/docs/ts/latest/api/common/index/CommonModule-class.html
CurrencyPipe	A										<section class='prog__container'><p>Formats a number as currency using locale rules.\n\nUse currency to format a number as currency.</p><pre><code>number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/CurrencyPipe-pipe.html
DatePipe	A										<section class='prog__container'><p>Formats a date according to locale rules.\n\nWhere:</p><pre><code>date_expression | date[:format]\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/DatePipe-pipe.html
DecimalPipe	A										<section class='prog__container'><p>Formats a number according to locale rules.\n</p><pre><code>number_expression | number[:digitInfo]\nFormats a number as text. Group sizing and separator and other locale-specific\nconfigurations are based on the active locale.\nwhere expression is a number:\n\ndigitInfo is a string which has a following format: \n{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\nminIntegerDigits is the minimum number of integer digits to use. Defaults to 1.\nminFractionDigits is the minimum number of digits after fraction. Defaults to 0.\nmaxFractionDigits is the maximum number of digits after fraction. Defaults to 3.\n\n\n\nFor more information on the acceptable range for each of these numbers and other\ndetails see your native internationalization library.\nWARNING: this pipe uses the Internationalization API which is not yet available in all browsers\nand may require a polyfill. See Browser support for details.\nExample\n@Component({\n  selector: 'number-pipe',\n  template: `<div>\n    <p>e (no formatting): {{e}}</p>\n    <p>e (3.1-5): {{e | number:'3.1-5'}}</p>\n    <p>pi (no formatting): {{pi}}</p>\n    <p>pi (3.5-5): {{pi | number:'3.5-5'}}</p>\n  </div>`\n})\nexport class NumberPipeComponent {\n  pi: number = 3.141592;\n  e: number = 2.718281828459045;\n}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/DecimalPipe-pipe.html
HashLocationStrategy	A										<section class='prog__container'><p>HashLocationStrategy is a LocationStrategy used to configure the\nLocation service to represent its state in the\nhash fragment\nof the browser's URL.\nFor instance, if you call location.go('/foo'), the browser's URL will become\nexample.com#/foo.</p><pre><code>import {Component, NgModule} from '@angular/core';\nimport {\n  LocationStrategy,\n  HashLocationStrategy\n} from '@angular/common';\n\n@NgModule({\n  providers: [{provide: LocationStrategy, useClass: HashLocationStrategy}]\n})\nclass AppModule {}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/HashLocationStrategy-class.html
I18nPluralPipe	A										<section class='prog__container'><p>Maps a value to a string that pluralizes the value according to locale rules.\n\nWhere:</p><pre><code>expression | i18nPlural:mapping\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/I18nPluralPipe-pipe.html
I18nSelectPipe	A										<section class='prog__container'><p>Generic selector that displays the string that matches the current value.\n\nWhere:</p><pre><code>expression | i18nSelect:mapping\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/I18nSelectPipe-pipe.html
JsonPipe	A										<section class='prog__container'><p>Converts value into JSON string.\n\nConverts value into string using JSON.stringify. Useful for debugging.</p><pre><code>expression | json\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/JsonPipe-pipe.html
Location	A										<section class='prog__container'><p>Location is a service that applications can use to interact with a browser's URL.\nDepending on which LocationStrategy is used, Location will either persist\nto the URL's path or the URL's hash segment.\nNote: it's better to use Router service to trigger route changes. Use\nLocation only if you need to interact with or create normalized URLs outside of\nrouting.\nLocation is responsible for normalizing the URL against the application's base href.\nA normalized URL is absolute from the URL host, includes the application's base href, and has no\ntrailing slash:</p><pre><code>import {Component} from '@angular/core';\nimport {Location} from '@angular/common';\n\n@Component({selector: 'app-component'})\nclass AppCmp {\n  constructor(location: Location) {\n    location.go('/foo');\n  }\n}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/Location-class.html
LocationChangeEvent	A										<section class='prog__container'><p>A serializable version of the event from onPopState or onHashChange</p></section>	https://angular.io/docs/ts/latest/api/common/index/LocationChangeEvent-interface.html
LocationChangeListener	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/common/index/LocationChangeListener-interface.html
LocationStrategy	A										<section class='prog__container'><p>LocationStrategy is responsible for representing and reading route state\nfrom the browser's URL. Angular provides two strategies:\nHashLocationStrategy and PathLocationStrategy (default).\nThis is used under the hood of the Location service.\nApplications should use the Router or Location services to\ninteract with application route state.\nFor instance, HashLocationStrategy produces URLs like\nhttp://example.com#/foo, and PathLocationStrategy produces\nhttp://example.com/foo as an equivalent URL.\nSee these two classes for more.</p></section>	https://angular.io/docs/ts/latest/api/common/index/LocationStrategy-class.html
LowerCasePipe	A										<section class='prog__container'><p>Transforms string to lowercase.\n\nConverts value into lowercase string using String.prototype.toLowerCase().</p><pre><code>expression | lowercase\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/LowerCasePipe-pipe.html
NgClass	A										<section class='prog__container'><p>Adds and removes CSS classes on an HTML element.\n</p><pre><code><some-element [ngClass]="'first second'">...</some-element>\n\n<some-element [ngClass]="['first', 'second']">...</some-element>\n\n<some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>\n\n<some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/NgClass-directive.html
NgFor	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html
NgIf	A										<section class='prog__container'><p></p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/NgIf-directive.html
NgLocalization	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/common/index/NgLocalization-class.html
NgPlural	A										<section class='prog__container'><p>Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n</p><pre><code><some-element [ngPlural]="value">\n  <ng-container *ngPluralCase="'=0'">there is nothing</ng-container>\n  <ng-container *ngPluralCase="'=1'">there is one</ng-container>\n  <ng-container *ngPluralCase="'few'">there are a few</ng-container>\n  <ng-container *ngPluralCase="'other'">there are exactly #</ng-container>\n</some-element>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/NgPlural-directive.html
NgPluralCase	A										<section class='prog__container'><p>Creates a view that will be added/removed from the parent NgPlural when the\n            given expression matches the plural expression according to CLDR rules.\n</p><pre><code><some-element [ngPlural]="value">\n  <ng-container *ngPluralCase="'=0'">...</ng-container>\n  <ng-container *ngPluralCase="'other'">...</ng-container>\n</some-element>\nSee NgPlural for more details and example.\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/NgPluralCase-directive.html
NgStyle	A										<section class='prog__container'><p>Update an HTML element styles.\n</p><pre><code><some-element [ngStyle]="{'font-style': styleExp}">...</some-element>\n\n<some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>\n\n<some-element [ngStyle]="objExp">...</some-element>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/NgStyle-directive.html
NgSwitch	A										<section class='prog__container'><p>Adds / removes DOM sub-trees when the nest match expressions matches the switch\n            expression.\n</p><pre><code><container-element [ngSwitch]="switch_expression">\n  <some-element *ngSwitchCase="match_expression_1">...</some-element>\n  <some-element *ngSwitchCase="match_expression_2">...</some-element>\n  <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>\n  <ng-container *ngSwitchCase="match_expression_3">\n    <!-- use a ng-container to group multiple root nodes -->\n    <inner-element></inner-element>\n    <inner-other-element></inner-other-element>\n  </ng-container>\n  <some-element *ngSwitchDefault>...</some-element>\n</container-element>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/NgSwitch-directive.html
NgSwitchCase	A										<section class='prog__container'><p>Creates a view that will be added/removed from the parent NgSwitch when the\n            given expression evaluate to respectively the same/different value as the switch\n            expression.\n</p><pre><code><container-element [ngSwitch]="switch_expression">\n  <some-element *ngSwitchCase="match_expression_1">...</some-element>\n</container-element>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/NgSwitchCase-directive.html
NgSwitchDefault	A										<section class='prog__container'><p>Creates a view that is added to the parent NgSwitch when no case expressions\nmatch the\n            switch expression.\n</p><pre><code><container-element [ngSwitch]="switch_expression">\n  <some-element *ngSwitchCase="match_expression_1">...</some-element>\n  <some-other-element *ngSwitchDefault>...</some-other-element>\n</container-element>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/NgSwitchDefault-directive.html
NgTemplateOutlet	A										<section class='prog__container'><p>Inserts an embedded view from a prepared TemplateRef\n</p><pre><code><template [ngTemplateOutlet]="templateRefExpression"\n          [ngOutletContext]="objectExpression">\n</template>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/NgTemplateOutlet-directive.html
PathLocationStrategy	A										<section class='prog__container'><p>PathLocationStrategy is a LocationStrategy used to configure the\nLocation service to represent its state in the\npath of the\nbrowser's URL.\nPathLocationStrategy is the default binding for LocationStrategy\nprovided in ROUTER_PROVIDERS.\nIf you're using PathLocationStrategy, you must provide a APP_BASE_HREF\nor add a base element to the document. This URL prefix that will be preserved\nwhen generating and recognizing URLs.\nFor instance, if you provide an APP_BASE_HREF of '/my/app' and call\nlocation.go('/foo'), the browser's URL will become\nexample.com/my/app/foo.\nSimilarly, if you add <base href='/my/app'/> to the document and call\nlocation.go('/foo'), the browser's URL will become\nexample.com/my/app/foo.</p></section>	https://angular.io/docs/ts/latest/api/common/index/PathLocationStrategy-class.html
PercentPipe	A										<section class='prog__container'><p>Formats a number as a percentage according to locale rules.\n\nFormats a number as percentage.</p><pre><code>number_expression | percent[:digitInfo]\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/PercentPipe-pipe.html
PlatformLocation	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/common/index/PlatformLocation-class.html
SlicePipe	A										<section class='prog__container'><p>Creates a new List or String containing a subset (slice) of the elements.\n\nWhere the input expression is a List or String, and:</p><pre><code>array_or_string_expression | slice:start[:end]\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/SlicePipe-pipe.html
UpperCasePipe	A										<section class='prog__container'><p>Transforms string to uppercase.\n\nConverts value into lowercase string using String.prototype.toUpperCase().</p><pre><code>expression | uppercase\n</pre></code></section>	https://angular.io/docs/ts/latest/api/common/index/UpperCasePipe-pipe.html
AnimationDriver	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/AnimationDriver-class.html
BrowserModule	A										<section class='prog__container'><p>The ng module for the browser.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/BrowserModule-class.html
By	A										<section class='prog__container'><p>Predicates for use with DebugElement's query functions.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/By-class.html
DOCUMENT	A										<section class='prog__container'><p>A DI Token representing the main rendering context. In a browser this is the DOM Document.\nNote: Document might not be available in the Application Context when Application and Rendering\nContexts are not the same (e.g. when running the application into a Web Worker).</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/DOCUMENT-let.html
DomSanitizer	A										<section class='prog__container'><p>DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\nvalues to be safe to use in the different DOM contexts.\nFor example, when binding a URL in an <a [href]="someValue"> hyperlink, someValue will be\nsanitized so that an attacker cannot inject e.g. a javascript: URL that would execute code on\nthe website.\nIn specific situations, it might be necessary to disable sanitization, for example if the\napplication genuinely needs to produce a javascript: style link with a dynamic value in it.\nUsers can bypass security by constructing a value with one of the bypassSecurityTrust...\nmethods, and then binding to that value from the template.\nThese situations should be very rare, and extraordinary care must be taken to avoid creating a\nCross Site Scripting (XSS) security bug!\nWhen using bypassSecurityTrust..., make sure to call the method as early as possible and as\nclose as possible to the source of the value, to make it easy to verify no security bug is\ncreated by its use.\nIt is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\ndoes not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\ncode. The sanitizer leaves safe values intact.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/DomSanitizer-class.html
EVENT_MANAGER_PLUGINS	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/EVENT_MANAGER_PLUGINS-let.html
EventManager	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/EventManager-class.html
HAMMER_GESTURE_CONFIG	A										<section class='prog__container'><p>A DI token that you can use to provideHammerGestureConfig to Angular. Use it to configure\nHammer gestures.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/HAMMER_GESTURE_CONFIG-let.html
HammerGestureConfig	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/HammerGestureConfig-class.html
NgProbeToken	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/NgProbeToken-class.html
SafeHtml	A										<section class='prog__container'><p>Marker interface for a value that's safe to use as HTML.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/SafeHtml-interface.html
SafeResourceUrl	A										<section class='prog__container'><p>Marker interface for a value that's safe to use as a URL to load executable code from.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/SafeResourceUrl-interface.html
SafeScript	A										<section class='prog__container'><p>Marker interface for a value that's safe to use as JavaScript.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/SafeScript-interface.html
SafeStyle	A										<section class='prog__container'><p>Marker interface for a value that's safe to use as style (CSS).</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/SafeStyle-interface.html
SafeUrl	A										<section class='prog__container'><p>Marker interface for a value that's safe to use as a URL linking to a document.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/SafeUrl-interface.html
Title	A										<section class='prog__container'><p>A service that can be used to get and set the title of a current HTML document.\nSince an Angular 2 application can't be bootstrapped on the entire HTML document (<html> tag)\nit is not possible to bind to the text property of the HTMLTitleElement elements\n(representing the <title> tag). Instead, this service can be used to set and get the current\ntitle value.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/Title-class.html
disableDebugTools	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export disableDebugTools() : void</code></pre><p>Disables Angular 2 tools.</p>\n</div></p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/disableDebugTools-function.html
enableDebugTools	A										<section class='prog__container'><p><div class="code-links" flex="80" flex-xs="100"><pre class="prettyprint no-bg"><code>export enableDebugTools(ref: ComponentRef&lt;T&gt;) : ComponentRef&lt;T&gt;</code></pre><p>Enabled Angular 2 debug tools that are accessible via your browser's\ndeveloper console.</p>\n<p>Usage:</p>\n<ol>\n<li>Open developer console (e.g. in Chrome Ctrl + Shift + j)</li>\n<li>Type <code>ng.</code> (usually the console will show auto-complete suggestion)</li>\n<li>Try the change detection profiler <code>ng.profiler.timeChangeDetection()</code>\nthen hit Enter.</li>\n</ol>\n</div></p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/enableDebugTools-function.html
platformBrowser	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-browser/index/platformBrowser-let.html
BaseRequestOptions	A										<section class='prog__container'><p>Subclass of RequestOptions, with default values.\nDefault values:\nThis class could be extended and bound to the RequestOptions class\nwhen configuring an Injector, in order to override the default options\nused by Http to create and send Requests.\nThe options could also be extended when manually creating a Request\nobject.</p><pre><code>import {provide} from '@angular/core';\nimport {bootstrap} from '@angular/platform-browser/browser';\nimport {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '@angular/http';\nimport {App} from './myapp';\n\nclass MyOptions extends BaseRequestOptions {\n  search: string = 'coreTeam=true';\n}\n\nbootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/index/BaseRequestOptions-class.html
BaseResponseOptions	A										<section class='prog__container'><p>Subclass of ResponseOptions, with default values.\nDefault values:\nThis class could be extended and bound to the ResponseOptions class\nwhen configuring an Injector, in order to override the default options\nused by Http to create Responses.\nThe options could also be extended when manually creating a Response\nobject.</p><pre><code>import {provide} from '@angular/core';\nimport {bootstrap} from '@angular/platform-browser/browser';\nimport {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n'@angular/http';\nimport {App} from './myapp';\n\nclass MyOptions extends BaseResponseOptions {\n  headers:Headers = new Headers({network: 'github'});\n}\n\nbootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/index/BaseResponseOptions-class.html
BrowserXhr	A										<section class='prog__container'><p>A backend for http that uses the XMLHttpRequest browser API.\nTake care not to evaluate this in non-browser contexts.</p></section>	https://angular.io/docs/ts/latest/api/http/index/BrowserXhr-class.html
Connection	A										<section class='prog__container'><p>Abstract class from which real connections are derived.</p></section>	https://angular.io/docs/ts/latest/api/http/index/Connection-class.html
ConnectionBackend	A										<section class='prog__container'><p>Abstract class from which real backends are derived.\nThe primary purpose of a ConnectionBackend is to create new connections to fulfill a given\nRequest.</p></section>	https://angular.io/docs/ts/latest/api/http/index/ConnectionBackend-class.html
CookieXSRFStrategy	A										<section class='prog__container'><p>XSRFConfiguration sets up Cross Site Request Forgery (XSRF) protection for the application\nusing a cookie. See Cross-Site_RequestForgery(CSRF)\nfor more information on XSRF.\nApplications can configure custom cookie and header names by binding an instance of this class\nwith different cookieName and headerName values. See the main HTTP documentation for more\ndetails.</p></section>	https://angular.io/docs/ts/latest/api/http/index/CookieXSRFStrategy-class.html
Headers	A										<section class='prog__container'><p>Polyfill for Headers, as\nspecified in the Fetch Spec.\nThe only known difference between this Headers implementation and the spec is the\nlack of an entries method.</p><pre><code>import {Headers} from '@angular/http';\n\nvar firstHeaders = new Headers();\nfirstHeaders.append('Content-Type', 'image/jpeg');\nconsole.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n\n// Create headers from Plain Old JavaScript Object\nvar secondHeaders = new Headers({\n  'X-My-Custom-Header': 'Angular'\n});\nconsole.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n\nvar thirdHeaders = new Headers(secondHeaders);\nconsole.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/index/Headers-class.html
Http	A										<section class='prog__container'><p>Performs http requests using XMLHttpRequest as the default backend.\nHttp is available as an injectable class, with methods to perform http requests. Calling\nrequest returns an Observable which will emit a single Response when a\nresponse is received.\nThe default construct used to perform requests, XMLHttpRequest, is abstracted as a "Backend" (\nXHRBackend in this case), which could be mocked with dependency injection by replacing\nthe XHRBackend provider, as in the following example:</p><pre><code>import {Http, HTTP_PROVIDERS} from '@angular/http';\nimport 'rxjs/add/operator/map'\n@Component({\n  selector: 'http-app',\n  viewProviders: [HTTP_PROVIDERS],\n  templateUrl: 'people.html'\n})\nclass PeopleComponent {\n  constructor(http: Http) {\n    http.get('people.json')\n      // Call map on the response observable to get the parsed people object\n      .map(res => res.json())\n      // Subscribe to the observable to get the parsed people object and attach it to the\n      // component\n      .subscribe(people => this.people = people);\n  }\n}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/index/Http-class.html
HttpModule	A										<section class='prog__container'><p>The module that includes http's providers</p></section>	https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html
JSONPBackend	A										<section class='prog__container'><p>A ConnectionBackend that uses the JSONP strategy of making requests.</p></section>	https://angular.io/docs/ts/latest/api/http/index/JSONPBackend-class.html
JSONPConnection	A										<section class='prog__container'><p>Abstract base class for an in-flight JSONP request.</p></section>	https://angular.io/docs/ts/latest/api/http/index/JSONPConnection-class.html
Jsonp	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/http/index/Jsonp-class.html
JsonpModule	A										<section class='prog__container'><p>The module that includes jsonp's providers</p></section>	https://angular.io/docs/ts/latest/api/http/index/JsonpModule-class.html
QueryEncoder	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/http/index/QueryEncoder-class.html
Request	A										<section class='prog__container'><p>Creates Request instances from provided values.\nThe Request's interface is inspired by the Request constructor defined in the Fetch\nSpec,\nbut is considered a static value whose body can be accessed many times. There are other\ndifferences in the implementation, but this is the most significant.\nRequest instances are typically created by higher-level classes, like Http and\nJsonp, but it may occasionally be useful to explicitly create Request instances.\nOne such example is when creating services that wrap higher-level services, like Http,\nwhere it may be useful to generate a Request with arbitrary headers and search params.</p><pre><code>import {Injectable, Injector} from '@angular/core';\nimport {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n\n@Injectable()\nclass AutoAuthenticator {\n  constructor(public http:Http) {}\n  request(url:string) {\n    return this.http.request(new Request({\n      method: RequestMethod.Get,\n      url: url,\n      search: 'password=123'\n    }));\n  }\n}\n\nvar injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\nvar authenticator = injector.get(AutoAuthenticator);\nauthenticator.request('people.json').subscribe(res => {\n  //URL should have included '?password=123'\n  console.log('people', res.json());\n});\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/index/Request-class.html
RequestOptions	A										<section class='prog__container'><p>Creates a request options object to be optionally provided when instantiating a\nRequest.\nThis class is based on the RequestInit description in the Fetch\nSpec.\nAll values are null by default. Typical defaults can be found in the BaseRequestOptions\nclass, which sub-classes RequestOptions.</p><pre><code>import {RequestOptions, Request, RequestMethod} from '@angular/http';\n\nvar options = new RequestOptions({\n  method: RequestMethod.Post,\n  url: 'https://google.com'\n});\nvar req = new Request(options);\nconsole.log('req.method:', RequestMethod[req.method]); // Post\nconsole.log('options.url:', options.url); // https://google.com\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/index/RequestOptions-class.html
RequestOptionsArgs	A										<section class='prog__container'><p>Interface for options to construct a RequestOptions, based on\nRequestInit from the Fetch spec.</p></section>	https://angular.io/docs/ts/latest/api/http/index/RequestOptionsArgs-interface.html
Response	A										<section class='prog__container'><p>Creates Response instances from provided values.\nThough this object isn't\nusually instantiated by end-users, it is the primary object interacted with when it comes time to\nadd data to a view.\nThe Response's interface is inspired by the Response constructor defined in the Fetch\nSpec, but is considered a static value whose body\ncan be accessed many times. There are other differences in the implementation, but this is the\nmost significant.</p><pre><code>http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/index/Response-class.html
ResponseOptions	A										<section class='prog__container'><p>Creates a response options object to be optionally provided when instantiating a\nResponse.\nThis class is based on the ResponseInit description in the Fetch\nSpec.\nAll values are null by default. Typical defaults can be found in the\nBaseResponseOptions class, which sub-classes ResponseOptions.\nThis class may be used in tests to build Responses for\nmock responses (see MockBackend).</p><pre><code>import {ResponseOptions, Response} from '@angular/http';\n\nvar options = new ResponseOptions({\n  body: '{"name":"Jeff"}'\n});\nvar res = new Response(options);\n\nconsole.log('res.json():', res.json()); // Object {name: "Jeff"}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/index/ResponseOptions-class.html
URLSearchParams	A										<section class='prog__container'><p>Map-like representation of url search parameters, based on\nURLSearchParams in the url living standard,\nwith several extensions for merging URLSearchParams objects:\nThis class accepts an optional second parameter of $QueryEncoder,\nwhich is used to serialize parameters before making a request. By default,\nQueryEncoder encodes keys and values of parameters using encodeURIComponent,\nand then un-encodes certain characters that are allowed to be part of the query\naccording to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\nThese are the characters that are not encoded: ! $ \' ( ) * + , ; A 9 - . _ ~ ? /\nIf the set of allowed query characters is not acceptable for a particular backend,\nQueryEncoder can be subclassed and provided as the 2nd argument to URLSearchParams.</p><pre><code>import {URLSearchParams, QueryEncoder} from '@angular/http';\nclass MyQueryEncoder extends QueryEncoder {\n  encodeKey(k: string): string {\n    return myEncodingFunction(k);\n  }\n\n  encodeValue(v: string): string {\n    return myEncodingFunction(v);\n  }\n}\n\nlet params = new URLSearchParams('', new MyQueryEncoder());\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/index/URLSearchParams-class.html
XHRBackend	A										<section class='prog__container'><p>Creates XHRConnection instances.\nThis class would typically not be used by end users, but could be\noverridden if a different backend implementation should be used,\nsuch as in a node backend.</p><pre><code>import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n@Component({\n  viewProviders: [\n    HTTP_PROVIDERS,\n    {provide: Http, useFactory: (backend, options) => {\n      return new Http(backend, options);\n    }, deps: [MyNodeBackend, BaseRequestOptions]}]\n})\nclass MyComponent {\n  constructor(http:Http) {\n    http.request('people.json').subscribe(res => this.people = res.json());\n  }\n}\n</pre></code></section>	https://angular.io/docs/ts/latest/api/http/index/XHRBackend-class.html
XHRConnection	A										<section class='prog__container'><p>Creates connections using XMLHttpRequest. Given a fully-qualified\nrequest, an XHRConnection will immediately create an XMLHttpRequest object and send the\nrequest.\nThis class would typically not be created or interacted with directly inside applications, though\nthe MockConnection may be interacted with in tests.</p></section>	https://angular.io/docs/ts/latest/api/http/index/XHRConnection-class.html
XSRFStrategy	A										<section class='prog__container'><p>An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.</p></section>	https://angular.io/docs/ts/latest/api/http/index/XSRFStrategy-class.html
ActivatedRoute	A										<section class='prog__container'><p>Contains the information about a route associated with a component loaded in an\noutlet.\nActivatedRoute can also be used to traverse the router state tree.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/ActivatedRoute-interface.html
ActivatedRouteSnapshot	A										<section class='prog__container'><p>Contains the information about a route associated with a component loaded in an\noutlet\nat a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\nstate tree.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/ActivatedRouteSnapshot-interface.html
CanActivate	A										<section class='prog__container'><p>Indicates that a class can implement to be a guard deciding if a route can be\nactivated.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/CanActivate-interface.html
CanActivateChild	A										<section class='prog__container'><p>Indicates that a class can implement to be a guard deciding if a child route can be\nactivated.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/CanActivateChild-interface.html
CanDeactivate	A										<section class='prog__container'><p>Indicates that a class can implement to be a guard deciding if a route can be\ndeactivated.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/CanDeactivate-interface.html
CanLoad	A										<section class='prog__container'><p>Indicates that a class can implement to be a guard deciding if a children can be\nloaded.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/CanLoad-interface.html
DefaultUrlSerializer	A										<section class='prog__container'><p>Example URLs:\nDefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\ncolon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\nspecify route specific parameters.</p><pre><code>/inbox/33(popup:compose)\n/inbox/33;open=true/messages/44\n</pre></code></section>	https://angular.io/docs/ts/latest/api/router/index/DefaultUrlSerializer-class.html
ExtraOptions	A										<section class='prog__container'><p>Represents options to configure the router.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/ExtraOptions-interface.html
NavigationCancel	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/index/NavigationCancel-class.html
NavigationEnd	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/index/NavigationEnd-class.html
NavigationError	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/index/NavigationError-class.html
NavigationExtras	A										<section class='prog__container'><p>Represents the extra options used during navigation.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/NavigationExtras-interface.html
NavigationStart	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/index/NavigationStart-class.html
NoPreloading	A										<section class='prog__container'><p>This strategy is enabled by default.</p></section>	https://angular.io/docs/ts/latest/api/router/index/NoPreloading-class.html
PRIMARY_OUTLET	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/index/PRIMARY_OUTLET-let.html
PreloadAllModules	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/index/PreloadAllModules-class.html
PreloadingStrategy	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/index/PreloadingStrategy-class.html
Resolve	A										<section class='prog__container'><p>Indicates that class can implement to be a data provider.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/Resolve-interface.html
Route	A										<section class='prog__container'><p>See Routes for more details.</p></section>	https://angular.io/docs/ts/latest/api/router/index/Route-interface.html
Router	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/index/Router-class.html
RouterLink	A										<section class='prog__container'><p>Lets you link to specific parts of your app.\n</p><pre><code>Consider the following route configuration:\n[{ path: 'user/:name', component: UserCmp }]\nWhen linking to this user/:name route, you can write:\n<a routerLink='/user/bob'>link to user component</a>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/router/index/RouterLink-directive.html
RouterLinkActive	A										<section class='prog__container'><p>Lets you add a CSS class to an element when the link's route becomes active.\n</p><pre><code><a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/router/index/RouterLinkActive-directive.html
RouterLinkWithHref	A										<section class='prog__container'><p>Lets you link to specific parts of your app.\nSee RouterLink for more information.\n</p><pre><code></pre></code></section>	https://angular.io/docs/ts/latest/api/router/index/RouterLinkWithHref-directive.html
RouterModule	A										<section class='prog__container'><p>Managing state transitions is one of the hardest parts of building applications. This is\nespecially true on the web, where you also need to ensure that the state is reflected in the URL.\nIn addition, we often want to split applications into multiple bundles and load them on demand.\nDoing this transparently is not trivial.\nThe Angular 2 router solves these problems. Using the router, you can declaratively specify\napplication states, manage state transitions while taking care of the URL, and load bundles on\ndemand.\nRead this developer guide to get an\noverview of how the router should be used.</p></section>	https://angular.io/docs/ts/latest/api/router/index/RouterModule-class.html
RouterOutlet	A										<section class='prog__container'><p>Acts as a placeholder that Angular dynamically fills based on the current router\nstate.\n</p><pre><code><router-outlet></router-outlet>\n<router-outlet name='left'></router-outlet>\n<router-outlet name='right'></router-outlet>\nA router outlet will emit an activate event any time a new component is being instantiated,\nand a deactivate event when it is being destroyed.\n<router-outlet\n  (activate)='onActivate($event)'\n  (deactivate)='onDeactivate($event)'></router-outlet>\n</pre></code></section>	https://angular.io/docs/ts/latest/api/router/index/RouterOutlet-directive.html
RouterOutletMap	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/index/RouterOutletMap-class.html
RouterState	A										<section class='prog__container'><p>Represents the state of the router.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/RouterState-interface.html
RouterStateSnapshot	A										<section class='prog__container'><p>Represents the state of the router at a moment in time.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/RouterStateSnapshot-interface.html
RoutesRecognized	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/router/index/RoutesRecognized-class.html
UrlSegment	A										<section class='prog__container'><p>A UrlSegment is a part of a URL between the two slashes. It contains a path and\nthe matrix parameters associated with the segment.</p></section>	https://angular.io/docs/ts/latest/api/router/index/UrlSegment-class.html
UrlSerializer	A										<section class='prog__container'><p>The url serialization strategy is customizable. You can\nmake all URLs case insensitive by providing a custom UrlSerializer.\nSee DefaultUrlSerializer for an example of a URL serializer.</p></section>	https://angular.io/docs/ts/latest/api/router/index/UrlSerializer-class.html
UrlTree	A										<section class='prog__container'><p>Represents the parsed URL.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/UrlTree-interface.html
provideRoutes	A										<section class='prog__container'><p>Registers routes.\n</p></section>	https://angular.io/docs/ts/latest/api/router/index/provideRoutes-function.html
RESOURCE_CACHE_PROVIDER	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/RESOURCE_CACHE_PROVIDER-let.html
platformBrowserDynamic	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/platformBrowserDynamic-let.html
BrowserDynamicTestingModule	A										<section class='prog__container'><p>NgModule for testing.</p></section>	https://angular.io/docs/ts/latest/api/platform-browser-dynamic/testing/index/BrowserDynamicTestingModule-class.html
platformBrowserDynamicTesting	A										<section class='prog__container'><p></p></section>	https://angular.io/docs/ts/latest/api/platform-browser-dynamic/testing/index/platformBrowserDynamicTesting-let.html
